using Bunit;
using ApBox.Core.Models;
using ApBox.Web.ViewModels;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;
using ApBox.Plugins;
using Moq;

namespace ApBox.Web.Tests.Components.Configuration;

[TestFixture]
[Category("UI")]
public class ReadersConfigurationWithPluginsTests : ApBoxTestContext
{
    private Mock<IReaderPluginMappingService> _mockMappingService;

    [SetUp]
    public void SetUp()
    {
        ResetMocks();
        SetupDefaultMocks();
        
        // Add plugin mapping service mock
        _mockMappingService = new Mock<IReaderPluginMappingService>();
        Services.AddSingleton(_mockMappingService.Object);
        
        // Register the ViewModel
        Services.AddScoped<ReaderConfigurationViewModel>();
        
        SetupPluginMocks();
    }

    private void SetupPluginMocks()
    {
        var plugins = new List<IApBoxPlugin>();
        
        var plugin1 = new Mock<IApBoxPlugin>();
        plugin1.Setup(x => x.Id).Returns(new Guid("11111111-1111-1111-1111-111111111111"));
        plugin1.Setup(x => x.Name).Returns("Access Control");
        plugin1.Setup(x => x.Description).Returns("Controls access based on card permissions");
        plugins.Add(plugin1.Object);
        
        var plugin2 = new Mock<IApBoxPlugin>();
        plugin2.Setup(x => x.Id).Returns(new Guid("22222222-2222-2222-2222-222222222222"));
        plugin2.Setup(x => x.Name).Returns("Event Logging");
        plugin2.Setup(x => x.Description).Returns("Logs all card events");
        plugins.Add(plugin2.Object);
        
        var plugin3 = new Mock<IApBoxPlugin>();
        plugin3.Setup(x => x.Id).Returns(new Guid("33333333-3333-3333-3333-333333333333"));
        plugin3.Setup(x => x.Name).Returns("Time Restrictions");
        plugin3.Setup(x => x.Description).Returns("Enforces time-based access rules");
        plugins.Add(plugin3.Object);
        
        MockPluginLoader.Setup(x => x.LoadPluginsAsync()).ReturnsAsync(plugins);
    }

    [Test]
    public void ReaderCard_ShowsAssignedPlugins()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var readers = new List<ReaderConfiguration>
        {
            new() { ReaderId = readerId, ReaderName = "Main Entrance" }
        };
        
        MockReaderConfigurationService.Setup(x => x.GetAllReadersAsync()).ReturnsAsync(readers);
        
        // Setup plugin mappings for this reader
        _mockMappingService.Setup(x => x.GetPluginsForReaderAsync(readerId))
            .ReturnsAsync(new List<string> 
            { 
                "11111111-1111-1111-1111-111111111111",
                "33333333-3333-3333-3333-333333333333" 
            });

        // Act
        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();

        // Assert
        var pluginBadges = component.FindAll($"[data-reader-id='{readerId}'] .plugin-badge");
        Assert.That(pluginBadges.Count, Is.EqualTo(2));
        Assert.That(pluginBadges[0].TextContent, Does.Contain("Access Control"));
        Assert.That(pluginBadges[1].TextContent, Does.Contain("Time Restrictions"));
    }

    [Test]
    public void ReaderCard_NoPlugins_ShowsNoPluginsMessage()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var readers = new List<ReaderConfiguration>
        {
            new() { ReaderId = readerId, ReaderName = "Emergency Exit" }
        };
        
        MockReaderConfigurationService.Setup(x => x.GetAllReadersAsync()).ReturnsAsync(readers);
        _mockMappingService.Setup(x => x.GetPluginsForReaderAsync(readerId))
            .ReturnsAsync(new List<string>());

        // Act
        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();

        // Assert
        var noPluginsText = component.Find($"[data-reader-id='{readerId}'] .no-plugins-text");
        Assert.That(noPluginsText.TextContent, Does.Contain("No plugins assigned"));
    }

    [Test]
    public async Task EditReader_ShowsPluginSelectionSection()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var readers = new List<ReaderConfiguration>
        {
            new() { ReaderId = readerId, ReaderName = "Test Reader" }
        };
        
        MockReaderConfigurationService.Setup(x => x.GetAllReadersAsync()).ReturnsAsync(readers);
        MockReaderConfigurationService.Setup(x => x.GetReaderAsync(readerId))
            .ReturnsAsync(readers.First());
        
        _mockMappingService.Setup(x => x.GetPluginsForReaderAsync(readerId))
            .ReturnsAsync(new List<string> { "11111111-1111-1111-1111-111111111111" });

        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();
        
        // Act
        var editButton = component.Find($"[id='edit-reader-{readerId}']");
        await editButton.ClickAsync(new MouseEventArgs());

        // Assert
        var pluginSection = component.Find("#plugin-selection-section");
        Assert.That(pluginSection, Is.Not.Null);
        
        var pluginCheckboxes = component.FindAll(".plugin-checkbox");
        Assert.That(pluginCheckboxes.Count, Is.EqualTo(3)); // All 3 plugins should be shown
        
        // First plugin should be checked
        var firstCheckbox = pluginCheckboxes[0].QuerySelector("input");
        Assert.That(firstCheckbox?.GetAttribute("checked"), Is.Not.Null);
    }

    [Test]
    public async Task SaveReader_WithPlugins_CallsMappingService()
    {
        // Arrange
        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();
        var addButton = component.Find("#add-reader-button");
        await addButton.ClickAsync(new MouseEventArgs());

        var nameInput = component.Find("#reader-name-input");
        await nameInput.InputAsync(new ChangeEventArgs { Value = "New Reader" });

        // Select two plugins
        var pluginCheckboxes = component.FindAll(".plugin-checkbox input");
        await pluginCheckboxes[0].ClickAsync(new MouseEventArgs()); // Check first plugin
        await pluginCheckboxes[2].ClickAsync(new MouseEventArgs()); // Check third plugin

        var saveButton = component.Find("#save-reader-button");

        // Act
        await saveButton.ClickAsync(new MouseEventArgs());

        // Assert
        _mockMappingService.Verify(x => x.SetPluginsForReaderAsync(
            It.IsAny<Guid>(),
            It.Is<IEnumerable<string>>(plugins => plugins.Count() == 2)
        ), Times.Once);
    }

    [Test]
    public async Task PluginOrder_CanBeChanged()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var readers = new List<ReaderConfiguration>
        {
            new() { ReaderId = readerId, ReaderName = "Test Reader" }
        };
        
        MockReaderConfigurationService.Setup(x => x.GetAllReadersAsync()).ReturnsAsync(readers);
        MockReaderConfigurationService.Setup(x => x.GetReaderAsync(readerId))
            .ReturnsAsync(readers.First());
        
        _mockMappingService.Setup(x => x.GetPluginsForReaderAsync(readerId))
            .ReturnsAsync(new List<string> 
            { 
                "11111111-1111-1111-1111-111111111111",
                "22222222-2222-2222-2222-222222222222" 
            });

        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();
        var editButton = component.Find($"[id='edit-reader-{readerId}']");
        await editButton.ClickAsync(new MouseEventArgs());

        // Act
        var moveDownButton = component.Find("[data-plugin-id='11111111-1111-1111-1111-111111111111'] .move-down-btn");
        await moveDownButton.ClickAsync(new MouseEventArgs());

        // Assert
        var pluginList = component.FindAll(".selected-plugin-item");
        Assert.That(pluginList[0].GetAttribute("data-plugin-id"), Is.EqualTo("22222222-2222-2222-2222-222222222222"));
        Assert.That(pluginList[1].GetAttribute("data-plugin-id"), Is.EqualTo("11111111-1111-1111-1111-111111111111"));
    }

    [Test]
    public async Task BulkPluginAssignment_ShowsCopyModal()
    {
        // Arrange
        var readers = new List<ReaderConfiguration>
        {
            new() { ReaderId = Guid.NewGuid(), ReaderName = "Reader 1" },
            new() { ReaderId = Guid.NewGuid(), ReaderName = "Reader 2" }
        };
        
        MockReaderConfigurationService.Setup(x => x.GetAllReadersAsync()).ReturnsAsync(readers);

        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();

        // Act
        var bulkButton = component.Find("#bulk-plugin-assignment-button");
        await bulkButton.ClickAsync(new MouseEventArgs());

        // Assert
        var modal = component.Find("#bulk-assignment-modal");
        Assert.That(modal, Is.Not.Null);
        
        var sourceSelect = component.Find("#source-reader-select");
        var targetSelect = component.Find("#target-reader-select");
        
        Assert.That(sourceSelect, Is.Not.Null);
        Assert.That(targetSelect, Is.Not.Null);
    }

    [Test]
    public async Task BulkPluginAssignment_CallsCopyService()
    {
        // Arrange
        var sourceId = Guid.NewGuid();
        var targetId = Guid.NewGuid();
        var readers = new List<ReaderConfiguration>
        {
            new() { ReaderId = sourceId, ReaderName = "Source Reader" },
            new() { ReaderId = targetId, ReaderName = "Target Reader" }
        };
        
        MockReaderConfigurationService.Setup(x => x.GetAllReadersAsync()).ReturnsAsync(readers);
        _mockMappingService.Setup(x => x.CopyMappingsAsync(sourceId, targetId))
            .Returns(Task.CompletedTask);

        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();
        
        // Open bulk assignment modal
        var bulkButton = component.Find("#bulk-plugin-assignment-button");
        await bulkButton.ClickAsync(new MouseEventArgs());
        
        // Select source and target
        var sourceSelect = component.Find("#source-reader-select");
        await sourceSelect.ChangeAsync(new ChangeEventArgs { Value = sourceId.ToString() });
        
        var targetSelect = component.Find("#target-reader-select");
        await targetSelect.ChangeAsync(new ChangeEventArgs { Value = targetId.ToString() });
        
        var copyButton = component.Find("#copy-plugins-button");

        // Act
        await copyButton.ClickAsync(new MouseEventArgs());

        // Assert
        _mockMappingService.Verify(x => x.CopyMappingsAsync(sourceId, targetId), Times.Once);
    }

    [Test]
    public void PluginSelectionUI_ShowsPluginDetails()
    {
        // Arrange
        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();
        var addButton = component.Find("#add-reader-button");
        addButton.Click();

        // Act & Assert
        var pluginItems = component.FindAll(".plugin-selection-item");
        Assert.That(pluginItems.Count, Is.EqualTo(3));
        
        // Check first plugin details
        var firstPlugin = pluginItems[0];
        Assert.That(firstPlugin.QuerySelector(".plugin-name")?.TextContent, Is.EqualTo("Access Control"));
        Assert.That(firstPlugin.QuerySelector(".plugin-description")?.TextContent, 
            Is.EqualTo("Controls access based on card permissions"));
    }

    [Test]
    public async Task DeleteReader_AlsoDeletesPluginMappings()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var readers = new List<ReaderConfiguration>
        {
            new() { ReaderId = readerId, ReaderName = "Test Reader" }
        };
        
        MockReaderConfigurationService.Setup(x => x.GetAllReadersAsync()).ReturnsAsync(readers);
        MockReaderConfigurationService.Setup(x => x.DeleteReaderAsync(readerId))
            .Returns(Task.CompletedTask);

        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();
        
        // Click delete
        var deleteButton = component.Find($"[id='delete-reader-{readerId}']");
        await deleteButton.ClickAsync(new MouseEventArgs());
        
        var confirmButton = component.Find("#confirm-delete-button");

        // Act
        await confirmButton.ClickAsync(new MouseEventArgs());

        // Assert
        MockReaderConfigurationService.Verify(x => x.DeleteReaderAsync(readerId), Times.Once);
        // The deletion of mappings should be handled by cascade delete in the database
    }

    [Test]
    public void PluginSelection_ShowsExecutionOrderIndicator()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var readers = new List<ReaderConfiguration>
        {
            new() { ReaderId = readerId, ReaderName = "Test Reader" }
        };
        
        MockReaderConfigurationService.Setup(x => x.GetAllReadersAsync()).ReturnsAsync(readers);
        MockReaderConfigurationService.Setup(x => x.GetReaderAsync(readerId))
            .ReturnsAsync(readers.First());
        
        _mockMappingService.Setup(x => x.GetPluginsForReaderAsync(readerId))
            .ReturnsAsync(new List<string> 
            { 
                "11111111-1111-1111-1111-111111111111",
                "22222222-2222-2222-2222-222222222222" 
            });

        var component = RenderComponent<ApBox.Web.Components.Configuration.ReadersConfiguration>();
        var editButton = component.Find($"[id='edit-reader-{readerId}']");
        editButton.Click();

        // Assert
        var selectedPlugins = component.FindAll(".selected-plugin-item");
        Assert.That(selectedPlugins[0].QuerySelector(".execution-order")?.TextContent, Is.EqualTo("1"));
        Assert.That(selectedPlugins[1].QuerySelector(".execution-order")?.TextContent, Is.EqualTo("2"));
    }
}