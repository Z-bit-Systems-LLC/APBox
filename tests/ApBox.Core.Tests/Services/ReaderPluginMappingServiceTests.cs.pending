using NUnit.Framework;
using Moq;
using Microsoft.Extensions.Logging;
using ApBox.Core.Services;
using ApBox.Core.Data.Repositories;
using ApBox.Core.Models;
using ApBox.Core.Data.Models;

namespace ApBox.Core.Tests.Services;

[TestFixture]
public class ReaderPluginMappingServiceTests
{
    private Mock<IReaderPluginMappingRepository> _mockRepository;
    private Mock<ILogger<ReaderPluginMappingService>> _mockLogger;
    private IReaderPluginMappingService _service;

    [SetUp]
    public void Setup()
    {
        _mockRepository = new Mock<IReaderPluginMappingRepository>();
        _mockLogger = new Mock<ILogger<ReaderPluginMappingService>>();
        _service = new ReaderPluginMappingService(_mockRepository.Object, _mockLogger.Object);
    }

    [Test]
    public async Task GetPluginsForReaderAsync_ReturnsCorrectPlugins()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var mappings = new List<ReaderPluginMappingEntity>
        {
            new() { ReaderId = readerId, PluginId = "Plugin1", ExecutionOrder = 1, IsEnabled = true },
            new() { ReaderId = readerId, PluginId = "Plugin2", ExecutionOrder = 2, IsEnabled = true },
            new() { ReaderId = readerId, PluginId = "Plugin3", ExecutionOrder = 3, IsEnabled = false }
        };

        _mockRepository.Setup(x => x.GetMappingsForReaderAsync(readerId))
            .ReturnsAsync(mappings);

        // Act
        var result = await _service.GetPluginsForReaderAsync(readerId);

        // Assert
        Assert.That(result.Count(), Is.EqualTo(2));
        Assert.That(result.First(), Is.EqualTo("Plugin1"));
        Assert.That(result.Last(), Is.EqualTo("Plugin2"));
    }

    [Test]
    public async Task GetPluginsForReaderAsync_ReturnsEmptyForNoMappings()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        _mockRepository.Setup(x => x.GetMappingsForReaderAsync(readerId))
            .ReturnsAsync(new List<ReaderPluginMappingEntity>());

        // Act
        var result = await _service.GetPluginsForReaderAsync(readerId);

        // Assert
        Assert.That(result.Count(), Is.EqualTo(0));
    }

    [Test]
    public async Task SetPluginsForReaderAsync_CreatesNewMappings()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var pluginIds = new List<string> { "Plugin1", "Plugin2", "Plugin3" };

        _mockRepository.Setup(x => x.DeleteMappingsForReaderAsync(readerId))
            .Returns(Task.CompletedTask);
        _mockRepository.Setup(x => x.CreateMappingAsync(It.IsAny<ReaderPluginMappingEntity>()))
            .Returns(Task.CompletedTask);

        // Act
        await _service.SetPluginsForReaderAsync(readerId, pluginIds);

        // Assert
        _mockRepository.Verify(x => x.DeleteMappingsForReaderAsync(readerId), Times.Once);
        _mockRepository.Verify(x => x.CreateMappingAsync(It.Is<ReaderPluginMappingEntity>(
            m => m.ReaderId == readerId && m.PluginId == "Plugin1" && m.ExecutionOrder == 1 && m.IsEnabled)), Times.Once);
        _mockRepository.Verify(x => x.CreateMappingAsync(It.Is<ReaderPluginMappingEntity>(
            m => m.ReaderId == readerId && m.PluginId == "Plugin2" && m.ExecutionOrder == 2 && m.IsEnabled)), Times.Once);
        _mockRepository.Verify(x => x.CreateMappingAsync(It.Is<ReaderPluginMappingEntity>(
            m => m.ReaderId == readerId && m.PluginId == "Plugin3" && m.ExecutionOrder == 3 && m.IsEnabled)), Times.Once);
    }

    [Test]
    public async Task SetPluginsForReaderAsync_ClearsAllWhenEmptyList()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var pluginIds = new List<string>();

        _mockRepository.Setup(x => x.DeleteMappingsForReaderAsync(readerId))
            .Returns(Task.CompletedTask);

        // Act
        await _service.SetPluginsForReaderAsync(readerId, pluginIds);

        // Assert
        _mockRepository.Verify(x => x.DeleteMappingsForReaderAsync(readerId), Times.Once);
        _mockRepository.Verify(x => x.CreateMappingAsync(It.IsAny<ReaderPluginMappingEntity>()), Times.Never);
    }

    [Test]
    public async Task UpdatePluginOrderAsync_UpdatesExecutionOrder()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var pluginId = "Plugin1";
        var newOrder = 5;

        _mockRepository.Setup(x => x.UpdateExecutionOrderAsync(readerId, pluginId, newOrder))
            .Returns(Task.CompletedTask);

        // Act
        await _service.UpdatePluginOrderAsync(readerId, pluginId, newOrder);

        // Assert
        _mockRepository.Verify(x => x.UpdateExecutionOrderAsync(readerId, pluginId, newOrder), Times.Once);
    }

    [Test]
    public async Task EnablePluginForReaderAsync_EnablesPlugin()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var pluginId = "Plugin1";

        _mockRepository.Setup(x => x.SetPluginEnabledAsync(readerId, pluginId, true))
            .Returns(Task.CompletedTask);

        // Act
        await _service.EnablePluginForReaderAsync(readerId, pluginId);

        // Assert
        _mockRepository.Verify(x => x.SetPluginEnabledAsync(readerId, pluginId, true), Times.Once);
    }

    [Test]
    public async Task DisablePluginForReaderAsync_DisablesPlugin()
    {
        // Arrange
        var readerId = Guid.NewGuid();
        var pluginId = "Plugin1";

        _mockRepository.Setup(x => x.SetPluginEnabledAsync(readerId, pluginId, false))
            .Returns(Task.CompletedTask);

        // Act
        await _service.DisablePluginForReaderAsync(readerId, pluginId);

        // Assert
        _mockRepository.Verify(x => x.SetPluginEnabledAsync(readerId, pluginId, false), Times.Once);
    }

    [Test]
    public async Task GetAllMappingsAsync_ReturnsAllMappings()
    {
        // Arrange
        var mappings = new List<ReaderPluginMappingEntity>
        {
            new() { ReaderId = Guid.NewGuid(), PluginId = "Plugin1", ExecutionOrder = 1, IsEnabled = true },
            new() { ReaderId = Guid.NewGuid(), PluginId = "Plugin2", ExecutionOrder = 1, IsEnabled = true }
        };

        _mockRepository.Setup(x => x.GetAllMappingsAsync())
            .ReturnsAsync(mappings);

        // Act
        var result = await _service.GetAllMappingsAsync();

        // Assert
        Assert.That(result.Count(), Is.EqualTo(2));
    }

    [Test]
    public async Task CopyMappingsAsync_CopiesMappingsFromSourceToTarget()
    {
        // Arrange
        var sourceReaderId = Guid.NewGuid();
        var targetReaderId = Guid.NewGuid();
        var sourceMappings = new List<ReaderPluginMappingEntity>
        {
            new() { ReaderId = sourceReaderId, PluginId = "Plugin1", ExecutionOrder = 1, IsEnabled = true },
            new() { ReaderId = sourceReaderId, PluginId = "Plugin2", ExecutionOrder = 2, IsEnabled = false }
        };

        _mockRepository.Setup(x => x.GetMappingsForReaderAsync(sourceReaderId))
            .ReturnsAsync(sourceMappings);
        _mockRepository.Setup(x => x.DeleteMappingsForReaderAsync(targetReaderId))
            .Returns(Task.CompletedTask);
        _mockRepository.Setup(x => x.CreateMappingAsync(It.IsAny<ReaderPluginMappingEntity>()))
            .Returns(Task.CompletedTask);

        // Act
        await _service.CopyMappingsAsync(sourceReaderId, targetReaderId);

        // Assert
        _mockRepository.Verify(x => x.DeleteMappingsForReaderAsync(targetReaderId), Times.Once);
        _mockRepository.Verify(x => x.CreateMappingAsync(It.Is<ReaderPluginMappingEntity>(
            m => m.ReaderId == targetReaderId && m.PluginId == "Plugin1" && m.ExecutionOrder == 1 && m.IsEnabled)), Times.Once);
        _mockRepository.Verify(x => x.CreateMappingAsync(It.Is<ReaderPluginMappingEntity>(
            m => m.ReaderId == targetReaderId && m.PluginId == "Plugin2" && m.ExecutionOrder == 2 && !m.IsEnabled)), Times.Once);
    }

    [Test]
    public async Task GetReadersUsingPluginAsync_ReturnsCorrectReaders()
    {
        // Arrange
        var pluginId = "Plugin1";
        var readerId1 = Guid.NewGuid();
        var readerId2 = Guid.NewGuid();
        var mappings = new List<ReaderPluginMappingEntity>
        {
            new() { ReaderId = readerId1, PluginId = pluginId, IsEnabled = true },
            new() { ReaderId = readerId2, PluginId = pluginId, IsEnabled = true }
        };

        _mockRepository.Setup(x => x.GetMappingsForPluginAsync(pluginId))
            .ReturnsAsync(mappings);

        // Act
        var result = await _service.GetReadersUsingPluginAsync(pluginId);

        // Assert
        Assert.That(result.Count(), Is.EqualTo(2));
        Assert.That(result.Contains(readerId1), Is.True);
        Assert.That(result.Contains(readerId2), Is.True);
    }
}