@page "/index2"
@using ApBox.Core.Services
@using ApBox.Plugins
@using ApBox.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@using Blazorise
@inject IReaderService ReaderService
@inject ICardProcessingService CardProcessingService
@inject IPluginLoader PluginLoader
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>ApBox Dashboard (Blazorise)</PageTitle>

<Container Fluid>
    <Row Margin="Margin.Is4.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is1">ApBox Dashboard</Heading>
            <Paragraph TextColor="TextColor.Muted">Card Reader Management System - Blazorise Version</Paragraph>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.Is3.OnDesktop">
            <Card Background="Background.Primary" TextColor="TextColor.White">
                <CardBody>
                    <Div Flex="Flex.JustifyContent.Between.AlignItems.Center">
                        <Div>
                            <Heading Size="HeadingSize.Is2" Margin="Margin.Is0">@activeReaders</Heading>
                            <Small>Active Readers</Small>
                        </Div>
                        <Div>
                            <Icon Name="IconName.Tv" IconSize="IconSize.x2" />
                        </Div>
                    </Div>
                </CardBody>
            </Card>
        </Column>
        
        <Column ColumnSize="ColumnSize.Is3.OnDesktop">
            <Card Background="Background.Success" TextColor="TextColor.White">
                <CardBody>
                    <Div Flex="Flex.JustifyContent.Between.AlignItems.Center">
                        <Div>
                            <Heading Size="HeadingSize.Is2" Margin="Margin.Is0">@loadedPlugins</Heading>
                            <Small>Loaded Plugins</Small>
                        </Div>
                        <Div>
                            <Icon Name="IconName.PuzzlePiece" IconSize="IconSize.x2" />
                        </Div>
                    </Div>
                </CardBody>
            </Card>
        </Column>
        
        <Column ColumnSize="ColumnSize.Is3.OnDesktop">
            <Card Background="Background.Info" TextColor="TextColor.White">
                <CardBody>
                    <Div Flex="Flex.JustifyContent.Between.AlignItems.Center">
                        <Div>
                            <Heading Size="HeadingSize.Is2" Margin="Margin.Is0">@totalEvents</Heading>
                            <Small>Card Events Today</Small>
                        </Div>
                        <Div>
                            <Icon Name="IconName.CreditCard" IconSize="IconSize.x2" />
                        </Div>
                    </Div>
                </CardBody>
            </Card>
        </Column>
        
        <Column ColumnSize="ColumnSize.Is3.OnDesktop">
            <Card Background="Background.Warning" TextColor="TextColor.White">
                <CardBody>
                    <Div Flex="Flex.JustifyContent.Between.AlignItems.Center">
                        <Div>
                            <Heading Size="HeadingSize.Is2" Margin="Margin.Is0">@systemStatus</Heading>
                            <Small>System Status</Small>
                        </Div>
                        <Div>
                            <Icon Name="IconName.CheckCircle" IconSize="IconSize.x2" />
                        </Div>
                    </Div>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromTop">
        <Column ColumnSize="ColumnSize.Is8.OnDesktop">
            <Card>
                <CardHeader>
                    <CardTitle Size="5" Margin="Margin.Is0.FromBottom">Recent Card Events</CardTitle>
                </CardHeader>
                <CardBody>
                    @if (recentEvents.Any())
                    {
                        <Table Responsive Striped>
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell>Time</TableHeaderCell>
                                    <TableHeaderCell>Reader</TableHeaderCell>
                                    <TableHeaderCell>Card Number</TableHeaderCell>
                                    <TableHeaderCell>Status</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                @foreach (var cardEvent in recentEvents.Take(10))
                                {
                                    <TableRow>
                                        <TableRowCell>@cardEvent.Timestamp.ToString("HH:mm:ss")</TableRowCell>
                                        <TableRowCell>@cardEvent.ReaderName</TableRowCell>
                                        <TableRowCell>@cardEvent.CardNumber</TableRowCell>
                                        <TableRowCell>
                                            <Badge Color="Color.Success">Processed</Badge>
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    }
                    else
                    {
                        <Div TextAlignment="TextAlignment.Center" Padding="Padding.Is3">
                            <Icon Name="IconName.CreditCard" IconSize="IconSize.x3" TextColor="TextColor.Muted" />
                            <Heading Size="HeadingSize.Is5" Margin="Margin.Is2.FromTop" TextColor="TextColor.Muted">No recent card events</Heading>
                        </Div>
                    }
                </CardBody>
            </Card>
        </Column>
        
        <Column ColumnSize="ColumnSize.Is4.OnDesktop">
            <Card>
                <CardHeader>
                    <CardTitle Size="5" Margin="Margin.Is0.FromBottom">Reader Status</CardTitle>
                </CardHeader>
                <CardBody>
                    @if (readers.Any())
                    {
                        @foreach (var reader in readers)
                        {
                            <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" Margin="Margin.Is2.FromBottom">
                                <Span>@reader.ReaderName</Span>
                                <Badge Color="Color.Success">Online</Badge>
                            </Div>
                        }
                    }
                    else
                    {
                        <Div TextAlignment="TextAlignment.Center" Padding="Padding.Is3">
                            <Icon Name="IconName.Tv" IconSize="IconSize.x3" TextColor="TextColor.Muted" />
                            <Heading Size="HeadingSize.Is6" Margin="Margin.Is2.FromTop" TextColor="TextColor.Muted">No readers configured</Heading>
                            <Button Color="Color.Primary" Size="Size.Small" Margin="Margin.Is2.FromTop" To="/configuration">
                                Add Reader
                            </Button>
                        </Div>
                    }
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

@code {
    private int activeReaders = 0;
    private int loadedPlugins = 0;
    private int totalEvents = 0;
    private string systemStatus = "Online";
    private List<CardReadEvent> recentEvents = new();
    private List<ReaderConfiguration> readers = new();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/cardevents"))
                .Build();

            // Handle card event notifications
            hubConnection.On<CardEventNotification>("CardEventProcessed", async (notification) =>
            {
                await InvokeAsync(() =>
                {
                    // Add new event to the beginning of the list
                    var newEvent = new CardReadEvent
                    {
                        ReaderId = notification.ReaderId,
                        ReaderName = notification.ReaderName,
                        CardNumber = notification.CardNumber,
                        BitLength = notification.BitLength,
                        Timestamp = notification.Timestamp
                    };

                    recentEvents.Insert(0, newEvent);
                    
                    // Keep only the latest 25 events
                    if (recentEvents.Count > 25)
                    {
                        recentEvents = recentEvents.Take(25).ToList();
                    }

                    totalEvents++;
                    StateHasChanged();
                });
            });

            // Handle reader status notifications
            hubConnection.On<ReaderStatusNotification>("ReaderStatusChanged", async (notification) =>
            {
                await InvokeAsync(() =>
                {
                    // Update reader status if needed
                    StateHasChanged();
                });
            });

            // Handle statistics updates
            hubConnection.On<StatisticsNotification>("StatisticsUpdated", async (notification) =>
            {
                await InvokeAsync(() =>
                {
                    activeReaders = notification.ActiveReaders;
                    loadedPlugins = notification.LoadedPlugins;
                    totalEvents = notification.TotalEventsToday;
                    systemStatus = notification.SystemStatus;
                    StateHasChanged();
                });
            });

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing SignalR: {ex.Message}");
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load readers
            var readerConfigs = await ReaderService.GetReadersAsync();
            readers = readerConfigs.ToList();
            activeReaders = readers.Count;

            // Load plugins
            var plugins = await PluginLoader.LoadPluginsAsync();
            loadedPlugins = plugins.Count();

            // Generate sample events for demonstration
            GenerateSampleEvents();
            totalEvents = recentEvents.Count;
        }
        catch (Exception ex)
        {
            systemStatus = "Error";
            Console.WriteLine($"Dashboard error: {ex.Message}");
        }
    }

    private void GenerateSampleEvents()
    {
        var random = new Random();
        var now = DateTime.Now;
        
        for (int i = 0; i < 25; i++)
        {
            recentEvents.Add(new CardReadEvent
            {
                ReaderId = Guid.NewGuid(),
                CardNumber = $"12345{random.Next(100, 999)}",
                ReaderName = $"Reader {random.Next(1, 4)}",
                Timestamp = now.AddMinutes(-random.Next(0, 480)),
                BitLength = 26
            });
        }
        
        recentEvents = recentEvents.OrderByDescending(e => e.Timestamp).ToList();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}