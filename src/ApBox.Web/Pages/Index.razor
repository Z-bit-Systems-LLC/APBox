@page "/"
@using ApBox.Web.ViewModels
@using ApBox.Core.Models
@using Blazorise.SpinKit
@inject DashboardViewModel ViewModel
@implements IDisposable

<PageTitle>ApBox Dashboard</PageTitle>

<Container Fluid>
    <Row Margin="Margin.Is4.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is1" ElementId="dashboard-title">ApBox Dashboard</Heading>
            <Paragraph TextColor="TextColor.Muted" ElementId="dashboard-subtitle">Card Reader Management System</Paragraph>
        </Column>
    </Row>

    @if (ViewModel.IsLoading)
    {
        <Row ElementId="loading-spinner">
            <Column>
                <Div Display="Display.Flex" JustifyContent="JustifyContent.Center" Margin="Margin.Is5.FromTop">
                    <Text Margin="Margin.Is2.FromEnd">Loading dashboard...</Text>
                    <SpinKit Type="SpinKitType.Pulse"/>
                </Div>
            </Column>
        </Row>
    }
    else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <Row>
            <Column>
                <Alert Color="Color.Danger" Visible="true">
                    <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
                    @ViewModel.ErrorMessage
                    <Button Color="Color.Secondary" Size="Size.Small" Margin="Margin.Is2.FromStart" Clicked="ViewModel.InitializeCommand.ExecuteAsync">
                        <Icon Name="IconName.Redo" />
                        Retry
                    </Button>
                </Alert>
            </Column>
        </Row>
    }
    else
    {
        <Row Margin="Margin.Is4.FromBottom">
            <Column ColumnSize="ColumnSize.Is3.OnDesktop">
                <Card Background="Background.Dark" TextColor="TextColor.White" ElementId="active-readers-card" Height="Height.Is100">
                    <CardBody>
                        <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" Height="Height.Is100">
                            <Div>
                                <Div Flex="Flex.AlignItems.Baseline">
                                    <Heading Size="HeadingSize.Is2" Margin="Margin.Is0.FromEnd.Is1" TextColor="TextColor.Success" ElementId="online-readers-value">@ViewModel.OnlineReaders</Heading>
                                    <Text TextColor="TextColor.Light">/</Text>
                                    <Heading Size="HeadingSize.Is3" Margin="Margin.Is1.FromStart" TextColor="TextColor.Light" ElementId="configured-readers-value">@ViewModel.ConfiguredReaders</Heading>
                                </Div>
                                <Small>Online / Configured Readers</Small>
                            </Div>
                            <Div>
                                <Icon Name="IconName.Tv" IconSize="IconSize.x2" />
                            </Div>
                        </Div>
                    </CardBody>
                </Card>
            </Column>
            
            <Column ColumnSize="ColumnSize.Is3.OnDesktop">
                <Card Background="Background.Success" TextColor="TextColor.White" ElementId="loaded-plugins-card" Height="Height.Is100">
                    <CardBody>
                        <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" Height="Height.Is100">
                            <Div>
                                <Heading Size="HeadingSize.Is2" Margin="Margin.Is0" ElementId="loaded-plugins-value">@ViewModel.LoadedPlugins</Heading>
                                <Small>Loaded Plugins</Small>
                            </Div>
                            <Div>
                                <Icon Name="IconName.Plug" IconSize="IconSize.x2" />
                            </Div>
                        </Div>
                    </CardBody>
                </Card>
            </Column>
            
            <Column ColumnSize="ColumnSize.Is3.OnDesktop">
                <Card Background="Background.Info" TextColor="TextColor.White" ElementId="total-events-card" Height="Height.Is100">
                    <CardBody>
                        <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" Height="Height.Is100">
                            <Div>
                                <Heading Size="HeadingSize.Is2" Margin="Margin.Is0" ElementId="total-events-value">@ViewModel.TotalEvents</Heading>
                                <Small>Today's Events</Small>
                            </Div>
                            <Div>
                                <Icon Name="IconName.CalendarDay" IconSize="IconSize.x2" />
                            </Div>
                        </Div>
                    </CardBody>
                </Card>
            </Column>
            
            <Column ColumnSize="ColumnSize.Is3.OnDesktop">
                <Card Background="Background.Primary" TextColor="TextColor.White" ElementId="system-status-card" Height="Height.Is100">
                    <CardBody>
                        <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" Height="Height.Is100">
                            <Div>
                                <Heading Size="HeadingSize.Is4" Margin="Margin.Is0" ElementId="system-status-value">@ViewModel.SystemStatus</Heading>
                                <Small>System Status</Small>
                            </Div>
                            <Div>
                                <Icon Name="@GetStatusIcon()" IconSize="IconSize.x2" />
                            </Div>
                        </Div>
                    </CardBody>
                </Card>
            </Column>
        </Row>

        <Row>
            <Column>
                <Card ElementId="recent-events-card">
                    <CardHeader>
                        <Heading Size="HeadingSize.Is4" Margin="Margin.Is0" ElementId="recent-events-title">Today's Recent Events (Cards & PINs)</Heading>
                    </CardHeader>
                    <CardBody>
                        @if (ViewModel.RecentEvents.Any())
                        {
                            <Table Striped Hoverable ElementId="recent-events-table">
                                <TableHeader>
                                    <TableRow>
                                        <TableHeaderCell>Time</TableHeaderCell>
                                        <TableHeaderCell>Type</TableHeaderCell>
                                        <TableHeaderCell>Reader</TableHeaderCell>
                                        <TableHeaderCell>Details</TableHeaderCell>
                                        <TableHeaderCell>Status</TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @foreach (var eventItem in ViewModel.RecentEvents.Take(15))
                                    {
                                        <TableRow>
                                            @if (eventItem is CardEventDisplay cardEvent)
                                            {
                                                <TableRowCell>@cardEvent.Timestamp.ToLocalTime().ToString("t")</TableRowCell>
                                                <TableRowCell>
                                                    <Badge Color="Color.Primary">
                                                        <Icon Name="IconName.CreditCard" Margin="Margin.Is1.FromEnd" />
                                                        Card
                                                    </Badge>
                                                </TableRowCell>
                                                <TableRowCell>@cardEvent.ReaderName</TableRowCell>
                                                <TableRowCell>@cardEvent.CardNumber</TableRowCell>
                                                <TableRowCell>
                                                    @if (cardEvent.Success)
                                                    {
                                                        <Badge Color="Color.Success">Success</Badge>
                                                    }
                                                    else
                                                    {
                                                        <Badge Color="Color.Danger">Failed</Badge>
                                                    }
                                                </TableRowCell>
                                            }
                                            else if (eventItem is CardReadEvent legacyCardEvent)
                                            {
                                                <TableRowCell>@legacyCardEvent.Timestamp.ToLocalTime().ToString("t")</TableRowCell>
                                                <TableRowCell>
                                                    <Badge Color="Color.Primary">
                                                        <Icon Name="IconName.CreditCard" Margin="Margin.Is1.FromEnd" />
                                                        Card
                                                    </Badge>
                                                </TableRowCell>
                                                <TableRowCell>@legacyCardEvent.ReaderName</TableRowCell>
                                                <TableRowCell>@legacyCardEvent.CardNumber</TableRowCell>
                                                <TableRowCell>
                                                    <Badge Color="Color.Secondary">Processed</Badge>
                                                </TableRowCell>
                                            }
                                            else if (eventItem is PinEventDisplay pinEvent)
                                            {
                                                <TableRowCell>@pinEvent.Timestamp.ToLocalTime().ToString("t")</TableRowCell>
                                                <TableRowCell>
                                                    <Badge Color="Color.Info">
                                                        <Icon Name="IconName.Key" Margin="Margin.Is1.FromEnd" />
                                                        PIN
                                                    </Badge>
                                                </TableRowCell>
                                                <TableRowCell>@pinEvent.ReaderName</TableRowCell>
                                                <TableRowCell>@pinEvent.PinLength digits (@pinEvent.CompletionReason)</TableRowCell>
                                                <TableRowCell>
                                                    @if (pinEvent.Success)
                                                    {
                                                        <Badge Color="Color.Success">Success</Badge>
                                                    }
                                                    else
                                                    {
                                                        <Badge Color="Color.Danger">Failed</Badge>
                                                    }
                                                </TableRowCell>
                                            }
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>
                        }
                        else
                        {
                            <Div Display="Display.Flex" JustifyContent="JustifyContent.Center" Margin="Margin.Is4">
                                <Text TextColor="TextColor.Muted">No recent events</Text>
                            </Div>
                        }
                    </CardBody>
                </Card>
            </Column>
        </Row>
    }
</Container>

@code {
    protected override async Task OnInitializedAsync()
    {
        // Set up component callbacks for the ViewModel
        ViewModel.StateHasChanged = StateHasChanged;
        ViewModel.InvokeAsync = InvokeAsync;
        
        // Initialize the ViewModel
        await ViewModel.InitializeCommand.ExecuteAsync(null);
    }

    private IconName GetStatusIcon()
    {
        return ViewModel.SystemStatus switch
        {
            "Online" => IconName.CheckCircle,
            "Error" => IconName.ExclamationTriangle,
            _ => IconName.QuestionCircle
        };
    }

    public void Dispose()
    {
        ViewModel.Dispose();
    }
}