@page "/test-card-reads"
@using ApBox.Core.Services.Reader
@using ApBox.Web.Constants
@using System.Text.Json
@inject IReaderService ReaderService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Test Card Reads</PageTitle>

<Container Fluid ElementId="test-card-reads-container">
    <Row Margin="Margin.Is4.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is1" ElementId="test-card-reads-title">Test Card Reads</Heading>
            <Paragraph TextColor="TextColor.Muted" ElementId="test-card-reads-subtitle">Simulate card reads to test real-time notifications</Paragraph>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.Is6.OnTablet">
            <Card ElementId="simulate-card">
                <CardHeader>
                    <CardTitle Size="5" Margin="Margin.Is0.FromBottom">Simulate Card Read</CardTitle>
                </CardHeader>
                <CardBody>
                    <Form>
                        <Field Margin="Margin.Is3.FromBottom">
                            <FieldLabel For="reader-select">Reader</FieldLabel>
                            <Select @bind-SelectedValue="selectedReaderId" ElementId="reader-select">
                                <SelectItem Value="@("")">Select a reader...</SelectItem>
                                @foreach (var reader in readers)
                                {
                                    <SelectItem Value="@reader.ReaderId.ToString()">@reader.ReaderName</SelectItem>
                                }
                            </Select>
                        </Field>
                        
                        <Field Margin="Margin.Is3.FromBottom">
                            <FieldLabel For="card-number-input">Card Number</FieldLabel>
                            <TextEdit @bind-Text="cardNumber" Placeholder="Enter card number" ElementId="card-number-input" />
                        </Field>
                        
                        <Field Margin="Margin.Is3.FromBottom">
                            <FieldLabel For="bit-length-select">Bit Length</FieldLabel>
                            <Select @bind-SelectedValue="bitLength" ElementId="bit-length-select">
                                <SelectItem Value="26">26-bit</SelectItem>
                                <SelectItem Value="37">37-bit</SelectItem>
                            </Select>
                        </Field>
                        
                        <Div Flex="Flex.JustifyContent.End.AlignItems.Center" Gap="Gap.Is2">
                            <Button Color="Color.Secondary" Clicked="GenerateRandomCard" ElementId="generate-random-button">
                                Generate Random
                            </Button>
                            <Button Color="Color.Primary" Clicked="SimulateCardRead" Disabled="isProcessing" ElementId="simulate-button" Loading="isProcessing">
                                Simulate Card Read
                            </Button>
                        </Div>
                    </Form>
                </CardBody>
            </Card>
        </Column>
        
        <Column ColumnSize="ColumnSize.Is6.OnTablet">
            <Card ElementId="quick-actions-card">
                <CardHeader>
                    <CardTitle Size="5" Margin="Margin.Is0.FromBottom">Quick Actions</CardTitle>
                </CardHeader>
                <CardBody>
                    <Buttons Orientation="Orientation.Vertical" Size="Size.Medium">
                        <Button Color="Color.Primary" Outline Clicked="() => SimulateMultipleReads(5)" Block ElementId="simulate-5-button">
                            Simulate 5 Random Reads
                        </Button>
                        <Button Color="Color.Success" Outline Clicked="() => SimulateMultipleReads(10)" Block ElementId="simulate-10-button">
                            Simulate 10 Random Reads
                        </Button>
                        <Button Color="Color.Info" Outline Clicked="StartContinuousSimulation" Disabled="isContinuousRunning" Block ElementId="start-continuous-button">
                            @if (isContinuousRunning)
                            {
                                <span>Continuous Running...</span>
                            }
                            else
                            {
                                <span>Start Continuous Simulation</span>
                            }
                        </Button>
                        <Button Color="Color.Danger" Outline Clicked="StopContinuousSimulation" Disabled="@(!isContinuousRunning)" Block ElementId="stop-continuous-button">
                            Stop Continuous
                        </Button>
                    </Buttons>
                </CardBody>
            </Card>
        </Column>
    </Row>

    @if (!string.IsNullOrEmpty(lastResult))
    {
        <Row>
            <Column>
                <Alert Color="Color.Info" ElementId="last-result-alert">
                    <AlertMessage>
                        <Strong>Last Result:</Strong>
                    </AlertMessage>
                    <AlertDescription>
                        <Div TextBreak ElementId="last-result-content">@lastResult</Div>
                    </AlertDescription>
                </Alert>
            </Column>
        </Row>
    }
</Container>

@code {
    private List<ReaderConfiguration> readers = new();
    private string selectedReaderId = "";
    private string cardNumber = "";
    private int bitLength = 26;
    private bool isProcessing = false;
    private bool isContinuousRunning = false;
    private string lastResult = "";
    private Timer? continuousTimer;
    private Random random = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var readerConfigs = await ReaderService.GetReadersAsync();
            readers = readerConfigs.ToList();
            
            if (readers.Any())
            {
                selectedReaderId = readers.First().ReaderId.ToString();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading readers: {ex.Message}");
        }
    }

    private async Task SimulateCardRead()
    {
        if (string.IsNullOrEmpty(selectedReaderId) || string.IsNullOrEmpty(cardNumber))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a reader and enter a card number");
            return;
        }

        isProcessing = true;
        StateHasChanged();

        try
        {
            var reader = readers.FirstOrDefault(r => r.ReaderId.ToString() == selectedReaderId);
            var request = new
            {
                ReaderId = Guid.Parse(selectedReaderId),
                CardNumber = cardNumber,
                BitLength = bitLength,
                ReaderName = reader?.ReaderName ?? "Unknown Reader"
            };

            var json = JsonSerializer.Serialize(request);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var response = await HttpClient.PostAsync(Navigation.ToAbsoluteUri(HubConstants.ProcessRealtimeEndpoint), content);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                lastResult = $"✅ Success: {responseContent}";
            }
            else
            {
                lastResult = $"❌ Error: {response.StatusCode} - {responseContent}";
            }
        }
        catch (Exception ex)
        {
            lastResult = $"❌ Exception: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void GenerateRandomCard()
    {
        cardNumber = random.Next(10000, 99999).ToString() + random.Next(100, 999).ToString();
    }

    private async Task SimulateMultipleReads(int count)
    {
        if (!readers.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No readers available");
            return;
        }

        for (int i = 0; i < count; i++)
        {
            var reader = readers[random.Next(readers.Count)];
            selectedReaderId = reader.ReaderId.ToString();
            GenerateRandomCard();
            
            await SimulateCardRead();
            
            // Small delay between reads
            await Task.Delay(random.Next(500, 1500));
        }
    }

    private async Task StartContinuousSimulation()
    {
        if (!readers.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No readers available");
            return;
        }

        isContinuousRunning = true;
        StateHasChanged();

        continuousTimer = new Timer(async _ =>
        {
            try
            {
                var reader = readers[random.Next(readers.Count)];
                selectedReaderId = reader.ReaderId.ToString();
                GenerateRandomCard();
                
                await InvokeAsync(async () =>
                {
                    await SimulateCardRead();
                });
            }
            catch (Exception ex)
            {
                await InvokeAsync(async () =>
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"Continuous simulation error: {ex.Message}");
                });
            }
        }, null, 0, random.Next(2000, 5000)); // Random interval between 2-5 seconds
    }

    private void StopContinuousSimulation()
    {
        isContinuousRunning = false;
        continuousTimer?.Dispose();
        continuousTimer = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        continuousTimer?.Dispose();
    }
}