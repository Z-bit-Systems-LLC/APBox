@page "/packet-trace"
@using ApBox.Core.PacketTracing
@using ApBox.Core.PacketTracing.Models
@using ApBox.Web.ViewModels
@using OSDP.Net.Tracing
@using Blazorise.SpinKit
@inject PacketTraceViewModel ViewModel
@implements IDisposable

<PageTitle>Packet Trace</PageTitle>

<Container Fluid ElementId="packet-trace-container">
    <Row Margin="Margin.Is4.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is1" ElementId="packet-trace-title">Packet Trace</Heading>
            <Paragraph TextColor="TextColor.Muted" ElementId="packet-trace-subtitle">Capture and analyze OSDP protocol packets</Paragraph>
        </Column>
    </Row>

    @if (ViewModel.IsLoading)
    {
        <Row ElementId="loading-spinner">
            <Column>
                <Div Display="Display.Flex" JustifyContent="JustifyContent.Center" Margin="Margin.Is5.FromTop">
                    <Text Margin="Margin.Is2.FromEnd">Loading packet trace...</Text>
                    <SpinKit Type="SpinKitType.Pulse"/>
                </Div>
            </Column>
        </Row>
    }
    else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <Row>
            <Column>
                <Alert Color="Color.Danger" Visible="true">
                    <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
                    @ViewModel.ErrorMessage
                    <Button Color="Color.Secondary" Size="Size.Small" Margin="Margin.Is2.FromStart" Clicked="ViewModel.InitializeCommand.ExecuteAsync">
                        <Icon Name="IconName.Redo" />
                        Retry
                    </Button>
                </Alert>
            </Column>
        </Row>
    }
    else
    {
        <Row>
            <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is12.OnMobile">
                <!-- Settings Panel -->
                <Card ElementId="trace-settings-card">
                    <CardHeader>
                        <CardTitle>
                            <Icon Name="IconName.Settings" Margin="Margin.Is2.FromEnd" />
                            Trace Settings
                        </CardTitle>
                    </CardHeader>
                <CardBody>
                    <!-- Enable/Disable Toggle -->
                    <Field>
                        <Switch @bind-Checked="@ViewModel.TracingEnabled" Disabled="@ViewModel.TracingEnabled">
                            Enable Tracing
                        </Switch>
                    </Field>
                    
                    <Divider />
                    
                    <!-- Filters -->
                    <Field>
                        <FieldLabel>Display Filters</FieldLabel>
                        <FieldHelp>Filters only affect display. All packets are captured in memory. Memory limit is fixed at 10 MB.</FieldHelp>
                        <Check Checked="@ViewModel.FilterPollCommands" CheckedChanged="@(async (bool value) => await OnPollFilterChanged(value))">
                            Hide Poll Commands
                        </Check>
                        <Check Checked="@ViewModel.FilterAckCommands" CheckedChanged="@(async (bool value) => await OnAckFilterChanged(value))">
                            Hide ACK Replies
                        </Check>
                    </Field>
                    
                </CardBody>
            </Card>
            
                <!-- Statistics Card -->
                <Card Margin="Margin.Is3.FromTop" ElementId="trace-statistics-card">
                    <CardHeader>
                        <CardTitle>
                            <Icon Name="IconName.ChartLine" Margin="Margin.Is2.FromEnd" />
                            Statistics
                        </CardTitle>
                    </CardHeader>
                <CardBody>
                    <Field>
                        <FieldLabel>Memory Usage</FieldLabel>
                        <Text>@ViewModel.MemoryUsage</Text>
                        <Progress Value="@GetMemoryPercentage()" Color="@GetMemoryProgressColor()" />
                    </Field>
                    
                    <Field>
                        <FieldLabel>Total Captured</FieldLabel>
                        <Badge Color="Color.Primary">@ViewModel.TotalPackets</Badge>
                    </Field>
                    
                    <Field>
                        <FieldLabel>Displayed</FieldLabel>
                        <Badge Color="Color.Success">@(ViewModel.TotalPackets - ViewModel.FilteredPackets)</Badge>
                    </Field>
                    
                    <Field>
                        <FieldLabel>Filtered Out</FieldLabel>
                        <Badge Color="Color.Warning">@ViewModel.FilteredPackets</Badge>
                    </Field>
                    
                    
                    <Field>
                        <FieldLabel>Duration</FieldLabel>
                        <Text>@ViewModel.TracingDuration</Text>
                    </Field>
                </CardBody>
            </Card>
            </Column>
            
            <Column ColumnSize="ColumnSize.Is9.OnDesktop.Is12.OnMobile">
                <!-- Packet Trace Grid -->
                <Card ElementId="packet-traces-card">
                    <CardHeader>
                    <CardActions>
                        <Buttons>
                            <Button Color="Color.Success" 
                                    Clicked="@StartTracing" 
                                    Disabled="@ViewModel.TracingEnabled"
                                    Size="Size.Small">
                                <Icon Name="IconName.Play" /> Start
                            </Button>
                            <Button Color="Color.Danger" 
                                    Clicked="@StopTracing"
                                    Disabled="@(!ViewModel.TracingEnabled)"
                                    Size="Size.Small">
                                <Icon Name="IconName.Stop" /> Stop
                            </Button>
                        </Buttons>
                        <Button Color="Color.Secondary" 
                                Clicked="@ExportToOsdpCap"
                                Size="Size.Small"
                                Float="Float.End"
                                Disabled="@(ViewModel.TotalPackets == 0)">
                            <Icon Name="IconName.Download" /> Export
                        </Button>
                    </CardActions>
                </CardHeader>
                    <CardBody>
                        @if (ViewModel.Packets.Any())
                        {
                            <Table Striped Hoverable Responsive ElementId="packet-traces-table">
                                <TableHeader>
                                    <TableRow>
                                        <TableHeaderCell>Time</TableHeaderCell>
                                        <TableHeaderCell>Î”t</TableHeaderCell>
                                        <TableHeaderCell>Direction</TableHeaderCell>
                                        <TableHeaderCell>Reader</TableHeaderCell>
                                        <TableHeaderCell>Type</TableHeaderCell>
                                        <TableHeaderCell>Len</TableHeaderCell>
                                        <TableHeaderCell>Details</TableHeaderCell>
                                        <TableHeaderCell>Actions</TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                            <TableBody>
                                @foreach (var packet in ViewModel.Packets.Take(50))
                                {
                                    <TableRow>
                                        <TableRowCell>
                                            <small>@packet.LocalTimestamp.ToString("HH:mm:ss.fff")</small>
                                        </TableRowCell>
                                        <TableRowCell>
                                            @if (packet.Interval.TotalMilliseconds > 0)
                                            {
                                                <small class="text-muted">+@packet.Interval.TotalMilliseconds.ToString("F0")ms</small>
                                            }
                                        </TableRowCell>
                                        <TableRowCell>
                                            <Badge Color="@(packet.Direction == TraceDirection.Output ? Color.Primary : Color.Success)">
                                                @if (packet.Direction == TraceDirection.Output)
                                                {
                                                    <Icon Name="IconName.ArrowRight" Margin="Margin.Is1.FromEnd" />
                                                    <span>OUT</span>
                                                }
                                                else
                                                {
                                                    <Icon Name="IconName.ArrowLeft" Margin="Margin.Is1.FromEnd" />
                                                    <span>IN</span>
                                                }
                                            </Badge>
                                        </TableRowCell>
                                        <TableRowCell>
                                            <span>Reader</span>
                                            <br />
                                            <small class="text-muted">[Address]</small>
                                        </TableRowCell>
                                        <TableRowCell>
                                            <span>@packet.Type</span>
                                        </TableRowCell>
                                        <TableRowCell>
                                            <small>@GetPacketLength(packet)</small>
                                        </TableRowCell>
                                        <TableRowCell>
                                            <span>@packet.Details</span>
                                        </TableRowCell>
                                        <TableRowCell>
                                            <Button Size="Size.Small" 
                                                    Color="Color.Light"
                                                    Clicked="@(() => ShowPacketDetails(packet))">
                                                <Icon Name="IconName.Eye" />
                                            </Button>
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                        }
                        else
                        {
                            <Div TextAlignment="TextAlignment.Center" Padding="Padding.Is5" ElementId="no-packets-message">
                                <Icon Name="IconName.List" IconSize="IconSize.x3" TextColor="TextColor.Muted" />
                                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromTop">No Packets Captured</Heading>
                                <Paragraph TextColor="TextColor.Muted">Start tracing to capture OSDP packets from configured readers.</Paragraph>
                            </Div>
                        }
                </CardBody>
            </Card>
            </Column>
        </Row>
    }
</Container>

<!-- Packet Details Modal -->
<Modal @ref="detailsModal" ElementId="packet-details-modal">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Packet Details</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (selectedPacket != null)
            {
                <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                    <Items>
                        <Tab Name="info">Info</Tab>
                        <Tab Name="hex">Hex</Tab>
                        <Tab Name="ascii">ASCII</Tab>
                    </Items>
                    <Content>
                        <TabPanel Name="info">
                            <Fields>
                                <Field>
                                    <FieldLabel>Timestamp</FieldLabel>
                                    <TextEdit Value="@selectedPacket.LocalTimestamp.ToString("yyyy-MM-dd HH:mm:ss.fff")" 
                                              ReadOnly />
                                </Field>
                                <Field>
                                    <FieldLabel>Direction</FieldLabel>
                                    <TextEdit Value="@selectedPacket.Direction.ToString()" ReadOnly />
                                </Field>
                                <Field>
                                    <FieldLabel>Type</FieldLabel>
                                    <TextEdit Value="@selectedPacket.Type" ReadOnly />
                                </Field>
                                <Field>
                                    <FieldLabel>Length</FieldLabel>
                                    <TextEdit Value="@GetPacketLength(selectedPacket).ToString()" ReadOnly />
                                </Field>
                                @if (!string.IsNullOrEmpty(selectedPacket.Details))
                                {
                                    <Field>
                                        <FieldLabel>Details</FieldLabel>
                                        <MemoEdit Value="@selectedPacket.Details" ReadOnly Rows="3" />
                                    </Field>
                                }
                            </Fields>
                        </TabPanel>
                        <TabPanel Name="hex">
                            <pre>@GetHexDisplay(GetPacketData(selectedPacket))</pre>
                        </TabPanel>
                        <TabPanel Name="ascii">
                            <pre>@GetAsciiDisplay(GetPacketData(selectedPacket))</pre>
                        </TabPanel>
                    </Content>
                </Tabs>
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    private Modal? detailsModal;
    private PacketTraceEntry? selectedPacket;
    private string selectedTab = "info";
    private bool _hasRendered = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Set up component callbacks for the ViewModel
        ViewModel.StateHasChanged = StateHasChanged;
        ViewModel.InvokeAsync = InvokeAsync;
        
        await ViewModel.InitializeComponentAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasRendered)
        {
            _hasRendered = true;
            await ViewModel.InitializeWithJavaScriptAsync();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    
    private int GetMemoryPercentage()
    {
        // Parse memory usage string and calculate percentage
        // This is a simplified implementation
        return 25;
    }
    
    private Color GetMemoryProgressColor()
    {
        var percentage = GetMemoryPercentage();
        if (percentage < 50) return Color.Success;
        if (percentage < 80) return Color.Warning;
        return Color.Danger;
    }
    
    private async Task ShowPacketDetails(PacketTraceEntry packet)
    {
        selectedPacket = packet;
        await detailsModal!.Show();
    }
    
    
    private void StartTracing()
    {
        ViewModel.StartTracingCommand.Execute(null);
    }
    
    private void StopTracing()
    {
        ViewModel.StopTracingCommand.Execute(null);
    }
    
    
    private async Task ExportToOsdpCap()
    {
        await ViewModel.ExportToOsdpCapCommand.ExecuteAsync(null);
    }
    
    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }
    
    private int GetPacketLength(PacketTraceEntry packet)
    {
        // For now, return a placeholder length
        // In the real implementation, this would come from parsing the packet data
        return 8; // Typical OSDP packet minimum length
    }
    
    private byte[] GetPacketData(PacketTraceEntry packet)
    {
        // For now, return empty data
        // In the real implementation, this would come from the TraceEntry.Data
        return new byte[0];
    }
    
    private string GetHexDisplay(byte[] data)
    {
        if (data == null || data.Length == 0) return "";
        
        var hex = new System.Text.StringBuilder();
        for (int i = 0; i < data.Length; i += 16)
        {
            hex.AppendFormat("{0:X4}: ", i);
            
            // Hex bytes
            for (int j = 0; j < 16; j++)
            {
                if (i + j < data.Length)
                    hex.AppendFormat("{0:X2} ", data[i + j]);
                else
                    hex.Append("   ");
                
                if (j == 7) hex.Append(" ");
            }
            
            hex.Append(" |");
            
            // ASCII representation
            for (int j = 0; j < 16 && i + j < data.Length; j++)
            {
                byte b = data[i + j];
                hex.Append(b >= 32 && b <= 126 ? (char)b : '.');
            }
            
            hex.AppendLine("|");
        }
        
        return hex.ToString();
    }
    
    private string GetAsciiDisplay(byte[] data)
    {
        if (data == null || data.Length == 0) return "";
        
        var ascii = new System.Text.StringBuilder();
        foreach (byte b in data)
        {
            if (b >= 32 && b <= 126)
                ascii.Append((char)b);
            else
                ascii.Append('.');
        }
        
        return ascii.ToString();
    }
    
    private async Task OnPollFilterChanged(bool value)
    {
        ViewModel.FilterPollCommands = value;
        // Auto-refresh is handled by the ViewModel's OnFilterPollCommandsChanged method
        await ViewModel.ApplySettingsCommand.ExecuteAsync(null);
    }
    
    private async Task OnAckFilterChanged(bool value)
    {
        ViewModel.FilterAckCommands = value;
        // Auto-refresh is handled by the ViewModel's OnFilterAckCommandsChanged method
        await ViewModel.ApplySettingsCommand.ExecuteAsync(null);
    }
    
    public void Dispose()
    {
        // Unsubscribe from events if needed
    }
}