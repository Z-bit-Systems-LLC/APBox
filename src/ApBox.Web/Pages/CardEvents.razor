@page "/card-events"
@using ApBox.Core.Services
@using ApBox.Core.Data.Repositories
@using ApBox.Core.Models
@using ApBox.Plugins
@inject ICardProcessingService CardProcessingService
@inject IReaderService ReaderService
@inject ICardEventRepository CardEventRepository

<PageTitle>Card Events</PageTitle>

<Container Fluid ElementId="card-events-container">
    <Row Margin="Margin.Is4.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is1" ElementId="card-events-title">Card Events</Heading>
            <Paragraph TextColor="TextColor.Muted" ElementId="card-events-subtitle">View and search card reader events</Paragraph>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.Is6.OnTablet">
            <Field>
                <FieldLabel>Search</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>
                            <Icon Name="IconName.Search" />
                        </AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit Placeholder="Search by card number or reader..." @bind-Text="_searchTerm" @onkeyup="OnSearchChanged" ElementId="search-input" />
                    </Addon>
                </Addons>
            </Field>
        </Column>
        <Column ColumnSize="ColumnSize.Is3.OnTablet">
            <Field>
                <FieldLabel>Reader Filter</FieldLabel>
                <Select @bind-SelectedValue="_selectedReader" ElementId="reader-filter">
                    <SelectItem Value="@("")">All Readers</SelectItem>
                    @foreach (var reader in _readers)
                    {
                        <SelectItem Value="@reader.ReaderName">@reader.ReaderName</SelectItem>
                    }
                </Select>
            </Field>
        </Column>
        <Column ColumnSize="ColumnSize.Is3.OnTablet">
            <Field>
                <FieldLabel>&nbsp;</FieldLabel>
                <Button Color="Color.Secondary" Clicked="RefreshEvents" Block ElementId="refresh-button">
                    <Icon Name="IconName.Sync" /> Refresh
                </Button>
            </Field>
        </Column>
    </Row>

    <Row>
        <Column>
            <Card ElementId="events-card">
                <CardHeader>
                    <CardTitle Size="5" Margin="Margin.Is0.FromBottom" ElementId="events-count">Recent Events (@FilteredEvents.Count())</CardTitle>
                </CardHeader>
                <CardBody>
                    @if (FilteredEvents.Any())
                    {
                        <Table Responsive Striped Hoverable ElementId="events-table">
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell>Timestamp</TableHeaderCell>
                                    <TableHeaderCell>Reader</TableHeaderCell>
                                    <TableHeaderCell>Card Number</TableHeaderCell>
                                    <TableHeaderCell>Bit Length</TableHeaderCell>
                                    <TableHeaderCell>Status</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                @foreach (var cardEvent in FilteredEvents.Take(_pageSize))
                                {
                                    <TableRow>
                                        <TableRowCell>@cardEvent.Timestamp.ToString("MM/dd/yyyy HH:mm:ss")</TableRowCell>
                                        <TableRowCell>
                                            <Badge Color="Color.Secondary">@cardEvent.ReaderName</Badge>
                                        </TableRowCell>
                                        <TableRowCell>
                                            <Text TextStyle="TextStyle.Monospace">@cardEvent.CardNumber</Text>
                                        </TableRowCell>
                                        <TableRowCell>@cardEvent.BitLength bits</TableRowCell>
                                        <TableRowCell>
                                            @if (cardEvent.Success)
                                            {
                                                <span @onclick="() => ViewEventDetails(cardEvent)" style="cursor: pointer;" title="Click to view plugin details">
                                                    <Badge Color="Color.Success">Success</Badge>
                                                </span>
                                            }
                                            else
                                            {
                                                <span @onclick="() => ViewEventDetails(cardEvent)" style="cursor: pointer;" title="Click to view plugin details">
                                                    <Badge Color="Color.Danger">Failed</Badge>
                                                </span>
                                            }
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    }
                    else
                    {
                        <Div TextAlignment="TextAlignment.Center" Padding="Padding.Is5" ElementId="no-events-message">
                            <Icon Name="IconName.CreditCard" IconSize="IconSize.x3" TextColor="TextColor.Muted" />
                            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromTop">No Events Found</Heading>
                            <Paragraph TextColor="TextColor.Muted">No card events match your current filters.</Paragraph>
                        </Div>
                    }
                    
                    @if (FilteredEvents.Count() > _pageSize)
                    {
                        <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" Margin="Margin.Is3.FromTop" ElementId="load-more-section">
                            <Span TextColor="TextColor.Muted">Showing @_pageSize of @FilteredEvents.Count() events</Span>
                            <Button Color="Color.Primary" Outline Clicked="LoadMoreEvents" ElementId="load-more-button">
                                Load More
                            </Button>
                        </Div>
                    }
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

<!-- Plugin Details Modal -->
<Modal @ref="pluginDetailsModal" ElementId="plugin-details-modal">
    <ModalContent Centered Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Card Processing Details</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (_selectedEvent != null)
            {
                var pluginResults = _selectedEvent.GetPluginResults();
                
                <!-- Basic Information Section -->
                <Div Margin="Margin.Is4.FromBottom">
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Text TextWeight="TextWeight.Bold">Card Number</Text>
                        </Column>
                        <Column>
                            <Text TextStyle="TextStyle.Monospace">@_selectedEvent.CardNumber</Text>
                        </Column>
                    </Row>
                    
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Text TextWeight="TextWeight.Bold">Reader</Text>
                        </Column>
                        <Column>
                            <Text>@_selectedEvent.ReaderName</Text>
                        </Column>
                    </Row>
                    
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Text TextWeight="TextWeight.Bold">Timestamp</Text>
                        </Column>
                        <Column>
                            <Text>@_selectedEvent.Timestamp.ToString("MM/dd/yyyy HH:mm:ss")</Text>
                        </Column>
                    </Row>
                    
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Text TextWeight="TextWeight.Bold">Status</Text>
                        </Column>
                        <Column>
                            @if (_selectedEvent.Success)
                            {
                                <Badge Color="Color.Success">Success</Badge>
                            }
                            else
                            {
                                <Badge Color="Color.Danger">Failed</Badge>
                            }
                        </Column>
                    </Row>
                    
                    @if (!string.IsNullOrWhiteSpace(_selectedEvent.Message))
                    {
                        <Row>
                            <Column ColumnSize="ColumnSize.Is4">
                                <Text TextWeight="TextWeight.Bold">Message</Text>
                            </Column>
                            <Column>
                                <Text>@_selectedEvent.Message</Text>
                            </Column>
                        </Row>
                    }
                </Div>
                
                <!-- Plugin Results Section -->
                @if (pluginResults.HasAnyResults)
                {
                    <Div Margin="Margin.Is5.FromTop">
                        <Heading Size="HeadingSize.Is5" Margin="Margin.Is4.FromBottom">Plugin Processing Results</Heading>
                        
                        @if (pluginResults.SuccessfulPlugins.Any())
                        {
                            <Div Margin="Margin.Is4.FromBottom">
                                <Text TextColor="TextColor.Success" TextWeight="TextWeight.Bold" TextSize="TextSize.Medium" Margin="Margin.Is3.FromBottom">
                                    ✓ Successful Plugins
                                </Text>
                                <Div>
                                    @foreach (var plugin in pluginResults.SuccessfulPlugins)
                                    {
                                        <Badge Color="Color.Success" Margin="Margin.Is1.FromEnd.Is2.FromBottom" Title="@($"Plugin approved access at {plugin.ProcessedAt:HH:mm:ss}")">
                                            @plugin.PluginName
                                        </Badge>
                                    }
                                </Div>
                            </Div>
                        }
                        
                        @if (pluginResults.FailedPlugins.Any())
                        {
                            <Div Margin="Margin.Is4.FromBottom">
                                <Text TextColor="TextColor.Danger" TextWeight="TextWeight.Bold" TextSize="TextSize.Medium" Margin="Margin.Is3.FromBottom">
                                    ✗ Failed Plugins
                                </Text>
                                <Div>
                                    @foreach (var plugin in pluginResults.FailedPlugins)
                                    {
                                        <Badge Color="Color.Danger" Margin="Margin.Is1.FromEnd.Is2.FromBottom" Title="@($"Error: {plugin.ErrorMessage}")">
                                            @plugin.PluginName
                                        </Badge>
                                    }
                                </Div>
                            </Div>
                        }
                        
                        <Alert Color="Color.Info" Visible="true" Margin="Margin.Is4.FromTop">
                            <Text TextSize="TextSize.Small">
                                <strong>Summary:</strong> @pluginResults.SuccessfulPlugins.Count successful, @pluginResults.FailedPlugins.Count failed out of @pluginResults.TotalPlugins total plugins
                            </Text>
                        </Alert>
                    </Div>
                }
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => pluginDetailsModal.Hide()">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<CardEventDisplay> _allEvents = [];
    private List<ReaderConfiguration> _readers = [];
    private string _searchTerm = "";
    private string _selectedReader = "";
    private int _pageSize = 20;
    private Modal pluginDetailsModal = default!;
    private CardEventDisplay? _selectedEvent;

    private IEnumerable<CardEventDisplay> FilteredEvents => FilterEvents();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Load readers
            var readerConfigs = await ReaderService.GetReadersAsync();
            _readers = readerConfigs.ToList();

            // Load card events from database
            await LoadRecentEventsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadRecentEventsAsync()
    {
        try
        {
            var eventEntities = await CardEventRepository.GetRecentAsync(500); // Load more for filtering
            _allEvents = eventEntities.Select(CardEventDisplay.FromEntity).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent events: {ex.Message}");
        }
    }

    private IEnumerable<CardEventDisplay> FilterEvents()
    {
        var filtered = _allEvents.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filtered = filtered.Where(e => 
                e.CardNumber.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.ReaderName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(_selectedReader))
        {
            filtered = filtered.Where(e => e.ReaderName == _selectedReader);
        }

        return filtered;
    }

    private void OnSearchChanged(KeyboardEventArgs e)
    {
        StateHasChanged();
    }


    private async Task RefreshEvents()
    {
        await LoadData();
        StateHasChanged();
    }

    private void LoadMoreEvents()
    {
        _pageSize += 20;
    }

    private async Task ViewEventDetails(CardEventDisplay cardEvent)
    {
        _selectedEvent = cardEvent;
        await pluginDetailsModal.Show();
    }
}