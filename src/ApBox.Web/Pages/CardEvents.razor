@page "/card-events"
@using ApBox.Web.ViewModels
@using ApBox.Core.Models
@using Blazorise.SpinKit
@inject CardEventsViewModel ViewModel
@implements IDisposable

<PageTitle>Card Events</PageTitle>

<Container Fluid ElementId="card-events-container">
    <Row Margin="Margin.Is4.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is1" ElementId="card-events-title">Card Events</Heading>
            <Paragraph TextColor="TextColor.Muted" ElementId="card-events-subtitle">View and search card reader events</Paragraph>
        </Column>
    </Row>

    @if (ViewModel.IsLoading)
    {
        <Row ElementId="loading-spinner">
            <Column>
                <Div Display="Display.Flex" JustifyContent="JustifyContent.Center" Margin="Margin.Is5.FromTop">
                    <Text Margin="Margin.Is2.FromEnd">Loading events...</Text>
                    <SpinKit Type="SpinKitType.Pulse"/>
                </Div>
            </Column>
        </Row>
    }
    else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <Row>
            <Column>
                <Alert Color="Color.Danger" Visible="true">
                    <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
                    @ViewModel.ErrorMessage
                    <Button Color="Color.Secondary" Size="Size.Small" Margin="Margin.Is2.FromStart" Clicked="ViewModel.InitializeCommand.ExecuteAsync">
                        <Icon Name="IconName.Redo" />
                        Retry
                    </Button>
                </Alert>
            </Column>
        </Row>
    }
    else
    {
        <Row Margin="Margin.Is4.FromBottom">
            <Column ColumnSize="ColumnSize.Is6.OnTablet">
                <Field>
                    <FieldLabel>Search</FieldLabel>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel>
                                <Icon Name="IconName.Search" />
                            </AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit Placeholder="Search by card number or reader..." @bind-Text="ViewModel.SearchTerm" @onkeyup="OnSearchChanged" ElementId="search-input" />
                        </Addon>
                    </Addons>
                </Field>
            </Column>
            <Column ColumnSize="ColumnSize.Is3.OnTablet">
                <Field>
                    <FieldLabel>Reader Filter</FieldLabel>
                    <Select @bind-SelectedValue="ViewModel.SelectedReader" @onchange="OnReaderFilterChanged" ElementId="reader-filter">
                        <SelectItem Value="@("")">All Readers</SelectItem>
                        @foreach (var reader in ViewModel.Readers)
                        {
                            <SelectItem Value="@reader.ReaderName">@reader.ReaderName</SelectItem>
                        }
                    </Select>
                </Field>
            </Column>
        </Row>

        <Row>
            <Column>
                <Card ElementId="events-card">
                    <CardHeader>
                        <CardTitle Size="5" Margin="Margin.Is0.FromBottom" ElementId="events-count">Recent Events (@ViewModel.FilteredEvents.Count())</CardTitle>
                    </CardHeader>
                    <CardBody>
                        @if (ViewModel.FilteredEvents.Any())
                        {
                            <Table Responsive Striped Hoverable ElementId="events-table">
                                <TableHeader>
                                    <TableRow>
                                        <TableHeaderCell>Timestamp</TableHeaderCell>
                                        <TableHeaderCell>Reader</TableHeaderCell>
                                        <TableHeaderCell>Card Number</TableHeaderCell>
                                        <TableHeaderCell>Bit Length</TableHeaderCell>
                                        <TableHeaderCell>Status</TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @foreach (var cardEvent in ViewModel.FilteredEvents.Take(ViewModel.PageSize))
                                    {
                                        <TableRow>
                                            <TableRowCell>@cardEvent.Timestamp.ToLocalTime().ToString("g")</TableRowCell>
                                            <TableRowCell>
                                                <Badge Color="Color.Secondary">@cardEvent.ReaderName</Badge>
                                            </TableRowCell>
                                            <TableRowCell>
                                                <Text TextStyle="TextStyle.Monospace">@cardEvent.CardNumber</Text>
                                            </TableRowCell>
                                            <TableRowCell>@cardEvent.BitLength bits</TableRowCell>
                                            <TableRowCell>
                                                @if (cardEvent.Success)
                                                {
                                                    <span @onclick="() => ViewEventDetails(cardEvent)" style="cursor: pointer;" title="Click to view plugin details">
                                                        <Badge Color="Color.Success">Success</Badge>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span @onclick="() => ViewEventDetails(cardEvent)" style="cursor: pointer;" title="Click to view plugin details">
                                                        <Badge Color="Color.Danger">Failed</Badge>
                                                    </span>
                                                }
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>
                        }
                        else
                        {
                            <Div TextAlignment="TextAlignment.Center" Padding="Padding.Is5" ElementId="no-events-message">
                                <Icon Name="IconName.CreditCard" IconSize="IconSize.x3" TextColor="TextColor.Muted" />
                                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromTop">No Events Found</Heading>
                                <Paragraph TextColor="TextColor.Muted">No card events match your current filters.</Paragraph>
                            </Div>
                        }
                        
                        @if (ViewModel.FilteredEvents.Count() > ViewModel.PageSize)
                        {
                            <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" Margin="Margin.Is3.FromTop" ElementId="load-more-section">
                                <Span TextColor="TextColor.Muted">Showing @ViewModel.PageSize of @ViewModel.FilteredEvents.Count() events</Span>
                                <Button Color="Color.Primary" Outline Clicked="ViewModel.LoadMoreCommand.Execute" ElementId="load-more-button">
                                    Load More
                                </Button>
                            </Div>
                        }
                    </CardBody>
                </Card>
            </Column>
        </Row>
    }
</Container>

<!-- Plugin Details Modal -->
<Modal @ref="pluginDetailsModal" ElementId="plugin-details-modal">
    <ModalContent Centered Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Card Processing Details</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (ViewModel.SelectedEvent != null)
            {
                var pluginResults = ViewModel.SelectedEvent.GetPluginResults();
                
                <!-- Basic Information Section -->
                <Div Margin="Margin.Is4.FromBottom">
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Text TextWeight="TextWeight.Bold">Card Number</Text>
                        </Column>
                        <Column>
                            <Text TextStyle="TextStyle.Monospace">@ViewModel.SelectedEvent.CardNumber</Text>
                        </Column>
                    </Row>
                    
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Text TextWeight="TextWeight.Bold">Reader</Text>
                        </Column>
                        <Column>
                            <Text>@ViewModel.SelectedEvent.ReaderName</Text>
                        </Column>
                    </Row>
                    
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Text TextWeight="TextWeight.Bold">Timestamp</Text>
                        </Column>
                        <Column>
                            <Text>@ViewModel.SelectedEvent.Timestamp.ToLocalTime().ToString("MM/dd/yyyy HH:mm:ss")</Text>
                        </Column>
                    </Row>
                    
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Text TextWeight="TextWeight.Bold">Status</Text>
                        </Column>
                        <Column>
                            @if (ViewModel.SelectedEvent.Success)
                            {
                                <Badge Color="Color.Success">Success</Badge>
                            }
                            else
                            {
                                <Badge Color="Color.Danger">Failed</Badge>
                            }
                        </Column>
                    </Row>
                    
                    @if (!string.IsNullOrWhiteSpace(ViewModel.SelectedEvent.Message))
                    {
                        <Row>
                            <Column ColumnSize="ColumnSize.Is4">
                                <Text TextWeight="TextWeight.Bold">Message</Text>
                            </Column>
                            <Column>
                                <Text>@ViewModel.SelectedEvent.Message</Text>
                            </Column>
                        </Row>
                    }
                </Div>
                
                <!-- Plugin Results Section -->
                @if (pluginResults.HasAnyResults)
                {
                    <Div Margin="Margin.Is5.FromTop">
                        <Heading Size="HeadingSize.Is5" Margin="Margin.Is4.FromBottom">Plugin Processing Results</Heading>
                        
                        @if (pluginResults.SuccessfulPlugins.Any())
                        {
                            <Div Margin="Margin.Is4.FromBottom">
                                <Text TextColor="TextColor.Success" TextWeight="TextWeight.Bold" TextSize="TextSize.Medium" Margin="Margin.Is3.FromBottom">
                                    ✓ Successful Plugins
                                </Text>
                                <Div>
                                    @foreach (var plugin in pluginResults.SuccessfulPlugins)
                                    {
                                        <Badge Color="Color.Success" Margin="Margin.Is1.FromEnd.Is2.FromBottom" Title="@($"Plugin approved access at {plugin.ProcessedAt.ToLocalTime():HH:mm:ss}")">
                                            @plugin.PluginName
                                        </Badge>
                                    }
                                </Div>
                            </Div>
                        }
                        
                        @if (pluginResults.FailedPlugins.Any())
                        {
                            <Div Margin="Margin.Is4.FromBottom">
                                <Text TextColor="TextColor.Danger" TextWeight="TextWeight.Bold" TextSize="TextSize.Medium" Margin="Margin.Is3.FromBottom">
                                    ✗ Failed Plugins
                                </Text>
                                <Div>
                                    @foreach (var plugin in pluginResults.FailedPlugins)
                                    {
                                        <Badge Color="Color.Danger" Margin="Margin.Is1.FromEnd.Is2.FromBottom" Title="@($"Error: {plugin.ErrorMessage}")">
                                            @plugin.PluginName
                                        </Badge>
                                    }
                                </Div>
                            </Div>
                        }
                        
                        <Alert Color="Color.Info" Visible="true" Margin="Margin.Is4.FromTop">
                            <Text TextSize="TextSize.Small">
                                <strong>Summary:</strong> @pluginResults.SuccessfulPlugins.Count successful, @pluginResults.FailedPlugins.Count failed out of @pluginResults.TotalPlugins total plugins
                            </Text>
                        </Alert>
                    </Div>
                }
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => pluginDetailsModal.Hide()">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal pluginDetailsModal = default!;

    protected override async Task OnInitializedAsync()
    {
        // Set up component callbacks for the ViewModel
        ViewModel.StateHasChanged = StateHasChanged;
        ViewModel.InvokeAsync = InvokeAsync;
        
        // Initialize the ViewModel
        await ViewModel.InitializeCommand.ExecuteAsync(null);
    }

    private void OnSearchChanged(KeyboardEventArgs e)
    {
        ViewModel.UpdateSearchTerm(ViewModel.SearchTerm);
    }

    private void OnReaderFilterChanged(ChangeEventArgs e)
    {
        ViewModel.UpdateReaderFilter(e.Value?.ToString() ?? "");
    }

    private async Task ViewEventDetails(CardEventDisplay cardEvent)
    {
        ViewModel.SelectEvent(cardEvent);
        await pluginDetailsModal.Show();
    }

    public void Dispose()
    {
        ViewModel.Dispose();
    }
}