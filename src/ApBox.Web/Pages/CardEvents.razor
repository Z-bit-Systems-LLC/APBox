@page "/card-events"
@using ApBox.Core.Services
@using ApBox.Core.Data.Repositories
@using ApBox.Plugins
@inject ICardProcessingService CardProcessingService
@inject IReaderService ReaderService
@inject ICardEventRepository CardEventRepository

<PageTitle>Card Events</PageTitle>

<Container Fluid ElementId="card-events-container">
    <Row Margin="Margin.Is4.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is1" ElementId="card-events-title">Card Events</Heading>
            <Paragraph TextColor="TextColor.Muted" ElementId="card-events-subtitle">View and search card reader events</Paragraph>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.Is6.OnTablet">
            <Field>
                <FieldLabel>Search</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>
                            <Icon Name="IconName.Search" />
                        </AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit Placeholder="Search by card number or reader..." @bind-Text="searchTerm" @onkeyup="OnSearchChanged" ElementId="search-input" />
                    </Addon>
                </Addons>
            </Field>
        </Column>
        <Column ColumnSize="ColumnSize.Is3.OnTablet">
            <Field>
                <FieldLabel>Reader Filter</FieldLabel>
                <Select @bind-SelectedValue="selectedReader" ElementId="reader-filter">
                    <SelectItem Value="@("")">All Readers</SelectItem>
                    @foreach (var reader in readers)
                    {
                        <SelectItem Value="@reader.ReaderName">@reader.ReaderName</SelectItem>
                    }
                </Select>
            </Field>
        </Column>
        <Column ColumnSize="ColumnSize.Is3.OnTablet">
            <Field>
                <FieldLabel>&nbsp;</FieldLabel>
                <Button Color="Color.Secondary" Clicked="RefreshEvents" Block ElementId="refresh-button">
                    <Icon Name="IconName.Sync" /> Refresh
                </Button>
            </Field>
        </Column>
    </Row>

    <Row>
        <Column>
            <Card ElementId="events-card">
                <CardHeader>
                    <CardTitle Size="5" Margin="Margin.Is0.FromBottom" ElementId="events-count">Recent Events (@filteredEvents.Count())</CardTitle>
                </CardHeader>
                <CardBody>
                    @if (filteredEvents.Any())
                    {
                        <Table Responsive Striped Hoverable ElementId="events-table">
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell>Timestamp</TableHeaderCell>
                                    <TableHeaderCell>Reader</TableHeaderCell>
                                    <TableHeaderCell>Card Number</TableHeaderCell>
                                    <TableHeaderCell>Bit Length</TableHeaderCell>
                                    <TableHeaderCell>Status</TableHeaderCell>
                                    <TableHeaderCell>Actions</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                @foreach (var cardEvent in filteredEvents.Take(pageSize))
                                {
                                    <TableRow>
                                        <TableRowCell>@cardEvent.Timestamp.ToString("MM/dd/yyyy HH:mm:ss")</TableRowCell>
                                        <TableRowCell>
                                            <Badge Color="Color.Secondary">@cardEvent.ReaderName</Badge>
                                        </TableRowCell>
                                        <TableRowCell>
                                            <Text TextStyle="TextStyle.Monospace">@cardEvent.CardNumber</Text>
                                        </TableRowCell>
                                        <TableRowCell>@cardEvent.BitLength bits</TableRowCell>
                                        <TableRowCell>
                                            <Badge Color="Color.Success">Processed</Badge>
                                        </TableRowCell>
                                        <TableRowCell>
                                            <Button Size="Size.Small" Color="Color.Primary" Outline Clicked="() => ViewEventDetails(cardEvent)">
                                                <Icon Name="IconName.Eye" />
                                            </Button>
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    }
                    else
                    {
                        <Div TextAlignment="TextAlignment.Center" Padding="Padding.Is5" ElementId="no-events-message">
                            <Icon Name="IconName.CreditCard" IconSize="IconSize.x3" TextColor="TextColor.Muted" />
                            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromTop">No Events Found</Heading>
                            <Paragraph TextColor="TextColor.Muted">No card events match your current filters.</Paragraph>
                        </Div>
                    }
                    
                    @if (filteredEvents.Count() > pageSize)
                    {
                        <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" Margin="Margin.Is3.FromTop" ElementId="load-more-section">
                            <Span TextColor="TextColor.Muted">Showing @pageSize of @filteredEvents.Count() events</Span>
                            <Button Color="Color.Primary" Outline Clicked="LoadMoreEvents" ElementId="load-more-button">
                                Load More
                            </Button>
                        </Div>
                    }
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

@code {
    private List<CardReadEvent> allEvents = new();
    private List<ReaderConfiguration> readers = new();
    private string searchTerm = "";
    private string selectedReader = "";
    private int pageSize = 20;

    private IEnumerable<CardReadEvent> filteredEvents => FilterEvents();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Load readers
            var readerConfigs = await ReaderService.GetReadersAsync();
            readers = readerConfigs.ToList();

            // Load card events from database
            await LoadRecentEventsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadRecentEventsAsync()
    {
        try
        {
            var eventEntities = await CardEventRepository.GetRecentAsync(500); // Load more for filtering
            allEvents = eventEntities.Select(e => e.ToCardReadEvent()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent events: {ex.Message}");
            // Fallback to sample data for development
            GenerateSampleEvents();
        }
    }

    private void GenerateSampleEvents()
    {
        var random = new Random();
        var now = DateTime.Now;
        
        allEvents.Clear();
        
        for (int i = 0; i < 150; i++)
        {
            var readerIndex = random.Next(0, Math.Max(1, readers.Count));
            var readerName = readers.Any() ? readers[readerIndex % readers.Count].ReaderName : $"Reader {random.Next(1, 5)}";
            
            allEvents.Add(new CardReadEvent
            {
                ReaderId = Guid.NewGuid(),
                CardNumber = $"{random.Next(10000, 99999)}{random.Next(100, 999)}",
                ReaderName = readerName,
                Timestamp = now.AddMinutes(-random.Next(0, 1440 * 7)), // Last 7 days
                BitLength = random.Next(0, 10) < 8 ? 26 : 37 // 80% 26-bit, 20% 37-bit
            });
        }
        
        allEvents = allEvents.OrderByDescending(e => e.Timestamp).ToList();
    }

    private IEnumerable<CardReadEvent> FilterEvents()
    {
        var filtered = allEvents.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(e => 
                e.CardNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.ReaderName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(selectedReader))
        {
            filtered = filtered.Where(e => e.ReaderName == selectedReader);
        }

        return filtered;
    }

    private void OnSearchChanged(KeyboardEventArgs e)
    {
        StateHasChanged();
    }


    private async Task RefreshEvents()
    {
        await LoadData();
        StateHasChanged();
    }

    private void LoadMoreEvents()
    {
        pageSize += 20;
    }

    private void ViewEventDetails(CardReadEvent cardEvent)
    {
        // TODO: Implement event details modal or navigation
        Console.WriteLine($"Viewing details for event: {cardEvent.CardNumber} at {cardEvent.Timestamp}");
    }
}