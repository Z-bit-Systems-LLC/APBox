@page "/readers"
@using ApBox.Core.Services
@using ApBox.Plugins
@inject IReaderService ReaderService
@inject IReaderConfigurationService ReaderConfigurationService
@inject IJSRuntime JSRuntime

<PageTitle>Card Readers</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Card Readers</h1>
                <button class="btn btn-primary" @onclick="ShowAddReaderModal">
                    <span class="oi oi-plus"></span> Add Reader
                </button>
            </div>
        </div>
    </div>

    @if (readers.Any())
    {
        <div class="row">
            @foreach (var reader in readers)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">@reader.ReaderName</h5>
                            <span class="badge bg-success">Online</span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">
                                <strong>ID:</strong> @reader.ReaderId.ToString("N")[..8]...<br/>
                                <strong>Address:</strong> N/A<br/>
                                <strong>Type:</strong> OSDP Reader
                            </p>
                            <div class="btn-group w-100" role="group">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => TestReader(reader.ReaderId)">
                                    <span class="oi oi-flash"></span> Test
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => ConfigureReader(reader.ReaderId)">
                                    <span class="oi oi-cog"></span> Configure
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveReader(reader.ReaderId)">
                                    <span class="oi oi-trash"></span> Remove
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body text-center">
                        <span class="oi oi-monitor" style="font-size: 4rem; color: #6c757d;"></span>
                        <h3 class="mt-3">No Readers Configured</h3>
                        <p class="text-muted">Add your first card reader to get started.</p>
                        <button class="btn btn-primary" @onclick="ShowAddReaderModal">
                            <span class="oi oi-plus"></span> Add Reader
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (showAddModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Reader</h5>
                    <button type="button" class="btn-close" @onclick="HideAddReaderModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="readerName" class="form-label">Reader Name</label>
                            <input type="text" class="form-control" id="readerName" @bind="newReaderName" />
                        </div>
                        <div class="mb-3">
                            <label for="readerAddress" class="form-label">OSDP Address</label>
                            <input type="number" class="form-control" id="readerAddress" @bind="newReaderAddress" min="0" max="126" />
                        </div>
                        <div class="mb-3">
                            <label for="readerDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="readerDescription" @bind="newReaderDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideAddReaderModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddReader" disabled="@(string.IsNullOrWhiteSpace(newReaderName))">Add Reader</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ReaderConfiguration> readers = new();
    private bool showAddModal = false;
    private string newReaderName = "";
    private int newReaderAddress = 1;
    private string newReaderDescription = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadReaders();
    }

    private async Task LoadReaders()
    {
        try
        {
            var readerConfigs = await ReaderService.GetReadersAsync();
            readers = readerConfigs.ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading readers: {ex.Message}");
        }
    }

    private void ShowAddReaderModal()
    {
        newReaderName = "";
        newReaderAddress = 1;
        newReaderDescription = "";
        showAddModal = true;
    }

    private void HideAddReaderModal()
    {
        showAddModal = false;
    }

    private async Task AddReader()
    {
        try
        {
            var newReader = new ReaderConfiguration
            {
                ReaderId = Guid.NewGuid(),
                ReaderName = newReaderName
            };

            // TODO: Add method to save reader configuration
            await LoadReaders();
            HideAddReaderModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding reader: {ex.Message}");
        }
    }

    private async Task TestReader(Guid readerId)
    {
        try
        {
            var feedback = new ReaderFeedback
            {
                Type = ReaderFeedbackType.Success,
                LedColor = LedColor.Green,
                LedDurationMs = 2000,
                BeepCount = 1
            };

            await ReaderService.SendFeedbackAsync(readerId, feedback);
            await JSRuntime.InvokeVoidAsync("alert", "Test feedback sent to reader");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error testing reader: {ex.Message}");
        }
    }

    private async Task ConfigureReader(Guid readerId)
    {
        await JSRuntime.InvokeVoidAsync("alert", "Reader configuration feature coming soon");
    }

    private async Task RemoveReader(Guid readerId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this reader?");
        if (confirmed)
        {
            try
            {
                // TODO: Add method to remove reader configuration
                await LoadReaders();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error removing reader: {ex.Message}");
            }
        }
    }
}