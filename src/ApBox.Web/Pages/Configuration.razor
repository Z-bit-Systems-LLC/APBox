@page "/configuration"
@using ApBox.Core.Services
@using ApBox.Plugins
@inject IReaderConfigurationService ReaderConfigurationService
@inject IPluginLoader PluginLoader
@inject IJSRuntime JSRuntime

<PageTitle>Configuration - ApBox</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4">Configuration</h1>
            <p class="text-muted">Manage readers, feedback settings, and system configuration</p>
        </div>
    </div>

    <!-- Navigation Tabs -->
    <div class="row mb-4">
        <div class="col-12">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class='nav-link @(activeTab == "readers" ? "active" : "")' 
                            @onclick='@(() => SetActiveTab("readers"))'
                            type='button' role='tab'>
                        <span class="oi oi-monitor me-2"></span>Readers
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class='nav-link @(activeTab == "feedback" ? "active" : "")' 
                            @onclick='@(() => SetActiveTab("feedback"))'
                            type='button' role='tab'>
                        <span class="oi oi-bell me-2"></span>Feedback
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class='nav-link @(activeTab == "plugins" ? "active" : "")' 
                            @onclick='@(() => SetActiveTab("plugins"))'
                            type='button' role='tab'>
                        <span class="oi oi-puzzle-piece me-2"></span>Plugins
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class='nav-link @(activeTab == "system" ? "active" : "")' 
                            @onclick='@(() => SetActiveTab("system"))'
                            type='button' role='tab'>
                        <span class="oi oi-cog me-2"></span>System
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <!-- Tab Content -->
    <div class="tab-content">
        
        <!-- Readers Tab -->
        @if (activeTab == "readers")
        {
            <div class="tab-pane fade show active">
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3>Reader Configuration</h3>
                            <button class="btn btn-primary" @onclick="ShowAddReaderModal">
                                <span class="oi oi-plus me-2"></span>Add Reader
                            </button>
                        </div>
                    </div>
                </div>

                @if (readers.Any())
                {
                    <div class="row">
                        @foreach (var reader in readers)
                        {
                            <div class="col-md-6 col-lg-4 mb-4">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">@reader.ReaderName</h6>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="() => EditReader(reader)">
                                                <span class="oi oi-pencil"></span>
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="() => DeleteReader(reader)">
                                                <span class="oi oi-trash"></span>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <p class="text-muted small mb-2">ID: @reader.ReaderId.ToString()[..8]...</p>
                                        <div class="mb-2">
                                            <small class="text-muted">Reader ID:</small><br>
                                            <span class="badge bg-info">@reader.ReaderId.ToString()[..8]...</span>
                                        </div>
                                        <div class="mb-2">
                                            <small class="text-muted">Default Feedback:</small><br>
                                            <span class="badge bg-@GetFeedbackColorClass(reader.DefaultFeedback?.LedColor)">
                                                @(reader.DefaultFeedback?.LedColor?.ToString() ?? "None")
                                            </span>
                                            @if (reader.DefaultFeedback?.BeepCount > 0)
                                            {
                                                <span class="badge bg-secondary ms-1">@reader.DefaultFeedback.BeepCount beeps</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <span class="oi oi-monitor display-1 text-muted"></span>
                        <h4 class="mt-3">No Readers Configured</h4>
                        <p class="text-muted">Add your first reader to get started</p>
                        <button class="btn btn-primary" @onclick="ShowAddReaderModal">
                            <span class="oi oi-plus me-2"></span>Add Reader
                        </button>
                    </div>
                }
            </div>
        }

        <!-- Feedback Tab -->
        @if (activeTab == "feedback")
        {
            <div class="tab-pane fade show active">
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Default Feedback Settings</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Success Feedback</label>
                                    <div class="border rounded p-3">
                                        <div class="row g-2">
                                            <div class="col-md-6">
                                                <label class="form-label small">LED Color</label>
                                                <select class="form-select form-select-sm" @bind="defaultSuccessFeedback.LedColor">
                                                    @foreach (var color in Enum.GetValues<LedColor>())
                                                    {
                                                        <option value="@color">@color</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label small">Beep Count</label>
                                                <input type="number" class="form-control form-control-sm" @bind="defaultSuccessFeedback.BeepCount" min="0" max="10" />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label small">Display Message</label>
                                                <input type="text" class="form-control form-control-sm" @bind="defaultSuccessFeedback.DisplayMessage" placeholder="SUCCESS" />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Failure Feedback</label>
                                    <div class="border rounded p-3">
                                        <div class="row g-2">
                                            <div class="col-md-6">
                                                <label class="form-label small">LED Color</label>
                                                <select class="form-select form-select-sm" @bind="defaultFailureFeedback.LedColor">
                                                    @foreach (var color in Enum.GetValues<LedColor>())
                                                    {
                                                        <option value="@color">@color</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label small">Beep Count</label>
                                                <input type="number" class="form-control form-control-sm" @bind="defaultFailureFeedback.BeepCount" min="0" max="10" />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label small">Display Message</label>
                                                <input type="text" class="form-control form-control-sm" @bind="defaultFailureFeedback.DisplayMessage" placeholder="ACCESS DENIED" />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <button class="btn btn-primary" @onclick="SaveDefaultFeedback">
                                    <span class="oi oi-check me-2"></span>Save Default Settings
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Feedback Preview</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6>Success Preview</h6>
                                    <div class="p-3 border rounded bg-light">
                                        <div class="d-flex align-items-center">
                                            <div class="led-preview bg-@GetFeedbackColorClass(defaultSuccessFeedback.LedColor) me-3"></div>
                                            <div>
                                                <div class="fw-bold">@(defaultSuccessFeedback.DisplayMessage ?? "SUCCESS")</div>
                                                <small class="text-muted">
                                                    @(defaultSuccessFeedback.BeepCount ?? 0) beep(s), 
                                                    @(defaultSuccessFeedback.LedColor?.ToString() ?? "Off") LED
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <h6>Failure Preview</h6>
                                    <div class="p-3 border rounded bg-light">
                                        <div class="d-flex align-items-center">
                                            <div class="led-preview bg-@GetFeedbackColorClass(defaultFailureFeedback.LedColor) me-3"></div>
                                            <div>
                                                <div class="fw-bold">@(defaultFailureFeedback.DisplayMessage ?? "ACCESS DENIED")</div>
                                                <small class="text-muted">
                                                    @(defaultFailureFeedback.BeepCount ?? 0) beep(s), 
                                                    @(defaultFailureFeedback.LedColor?.ToString() ?? "Off") LED
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Plugins Tab -->
        @if (activeTab == "plugins")
        {
            <div class="tab-pane fade show active">
                <div class="row mb-3">
                    <div class="col-12">
                        <h3>Loaded Plugins</h3>
                        <p class="text-muted">Plugins are automatically loaded from the plugins directory</p>
                    </div>
                </div>

                @if (loadedPlugins.Any())
                {
                    <div class="row">
                        @foreach (var plugin in loadedPlugins)
                        {
                            <div class="col-md-6 col-lg-4 mb-4">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h6 class="mb-0">@plugin.Name</h6>
                                        <small class="text-muted">v@plugin.Version</small>
                                    </div>
                                    <div class="card-body">
                                        <p class="card-text">@plugin.Description</p>
                                        <div class="mt-auto">
                                            <span class="badge bg-success">
                                                <span class="oi oi-check me-1"></span>Loaded
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <span class="oi oi-puzzle-piece display-1 text-muted"></span>
                        <h4 class="mt-3">No Plugins Loaded</h4>
                        <p class="text-muted">Place plugin DLLs in the plugins directory and restart the application</p>
                    </div>
                }
            </div>
        }

        <!-- System Tab -->
        @if (activeTab == "system")
        {
            <div class="tab-pane fade show active">
                <div class="row">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">System Information</h5>
                            </div>
                            <div class="card-body">
                                <dl class="row">
                                    <dt class="col-sm-3">Application Version</dt>
                                    <dd class="col-sm-9">1.0.0</dd>

                                    <dt class="col-sm-3">Runtime</dt>
                                    <dd class="col-sm-9">.NET 8</dd>

                                    <dt class="col-sm-3">Active Readers</dt>
                                    <dd class="col-sm-9">@readers.Count</dd>

                                    <dt class="col-sm-3">Loaded Plugins</dt>
                                    <dd class="col-sm-9">@loadedPlugins.Count</dd>

                                    <dt class="col-sm-3">Plugin Directory</dt>
                                    <dd class="col-sm-9">
                                        <code>plugins/</code>
                                    </dd>

                                    <dt class="col-sm-3">System Status</dt>
                                    <dd class="col-sm-9">
                                        <span class="badge bg-success">
                                            <span class="oi oi-circle-check me-1"></span>Online
                                        </span>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="card-title mb-0">Actions</h6>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-outline-primary" @onclick="RefreshPlugins">
                                        <span class="oi oi-reload me-2"></span>Refresh Plugins
                                    </button>
                                    <button class="btn btn-outline-info" @onclick="ExportConfiguration">
                                        <span class="oi oi-data-transfer-download me-2"></span>Export Config
                                    </button>
                                    <button class="btn btn-outline-warning" @onclick="ImportConfiguration">
                                        <span class="oi oi-data-transfer-upload me-2"></span>Import Config
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Status Messages -->
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050">
        <div class="alert alert-@statusMessageType alert-dismissible fade show" role="alert">
            @statusMessage
            <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
        </div>
    </div>
}

<style>
    .led-preview {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 2px solid #dee2e6;
    }
    
    .bg-red { background-color: #dc3545 !important; }
    .bg-green { background-color: #28a745 !important; }
    .bg-amber { background-color: #ffc107 !important; }
    .bg-blue { background-color: #007bff !important; }
    .bg-off { background-color: #6c757d !important; }
</style>

@code {
    private string activeTab = "readers";
    private List<ReaderConfiguration> readers = new();
    private List<IApBoxPlugin> loadedPlugins = new();
    private ReaderFeedback defaultSuccessFeedback = new() 
    { 
        Type = ReaderFeedbackType.Success,
        LedColor = LedColor.Green, 
        BeepCount = 1, 
        DisplayMessage = "SUCCESS" 
    };
    private ReaderFeedback defaultFailureFeedback = new() 
    { 
        Type = ReaderFeedbackType.Failure,
        LedColor = LedColor.Red, 
        BeepCount = 3, 
        DisplayMessage = "ACCESS DENIED" 
    };
    private string statusMessage = "";
    private string statusMessageType = "info";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            readers = (await ReaderConfigurationService.GetAllReadersAsync()).ToList();
            loadedPlugins = (await PluginLoader.LoadPluginsAsync()).ToList();
        }
        catch (Exception ex)
        {
            await ShowMessage($"Error loading data: {ex.Message}", "danger");
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private async Task ShowAddReaderModal()
    {
        // TODO: Implement modal for adding readers
        await ShowMessage("Add Reader functionality coming soon", "info");
    }

    private async Task EditReader(ReaderConfiguration reader)
    {
        // TODO: Implement edit reader functionality
        await ShowMessage($"Edit Reader {reader.ReaderName} functionality coming soon", "info");
    }

    private async Task DeleteReader(ReaderConfiguration reader)
    {
        // TODO: Implement delete reader functionality
        await ShowMessage($"Delete Reader {reader.ReaderName} functionality coming soon", "warning");
    }

    private async Task SaveDefaultFeedback()
    {
        try
        {
            // TODO: Save to configuration service
            await ShowMessage("Default feedback settings saved successfully", "success");
        }
        catch (Exception ex)
        {
            await ShowMessage($"Error saving settings: {ex.Message}", "danger");
        }
    }

    private async Task RefreshPlugins()
    {
        try
        {
            loadedPlugins = (await PluginLoader.LoadPluginsAsync()).ToList();
            await ShowMessage("Plugins refreshed successfully", "success");
        }
        catch (Exception ex)
        {
            await ShowMessage($"Error refreshing plugins: {ex.Message}", "danger");
        }
    }

    private async Task ExportConfiguration()
    {
        // TODO: Implement export functionality
        await ShowMessage("Export configuration functionality coming soon", "info");
    }

    private async Task ImportConfiguration()
    {
        // TODO: Implement import functionality
        await ShowMessage("Import configuration functionality coming soon", "info");
    }

    private string GetFeedbackColorClass(LedColor? color)
    {
        return color switch
        {
            LedColor.Red => "red",
            LedColor.Green => "green",
            LedColor.Amber => "amber",
            LedColor.Blue => "blue",
            _ => "off"
        };
    }

    private async Task ShowMessage(string message, string type)
    {
        statusMessage = message;
        statusMessageType = type;
        StateHasChanged();
        
        // Auto-hide after 5 seconds
        await Task.Delay(5000);
        if (statusMessage == message) // Only clear if it's still the same message
        {
            ClearStatusMessage();
        }
    }

    private void ClearStatusMessage()
    {
        statusMessage = "";
        StateHasChanged();
    }
}