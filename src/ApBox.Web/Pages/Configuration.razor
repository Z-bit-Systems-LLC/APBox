@page "/configuration"
@using ApBox.Web.Components.Configuration

<PageTitle>Configuration - ApBox</PageTitle>

<Container Fluid ElementId="configuration-container">
    <Row Margin="Margin.Is4.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is1" ElementId="configuration-title">Configuration</Heading>
            <Paragraph TextColor="TextColor.Muted" ElementId="configuration-subtitle">Manage readers, feedback settings, and system configuration</Paragraph>
        </Column>
    </Row>

    <!-- Navigation Tabs -->
    <Row Margin="Margin.Is4.FromBottom">
        <Column>
            <Tabs SelectedTab="@activeTab" SelectedTabChanged="@OnSelectedTabChanged" Pills ElementId="configuration-tabs">
                <Items>
                    <Tab Name="readers" ElementId="readers-tab">
                        <Icon Name="IconName.Tv" Margin="Margin.Is2.FromEnd" />
                        Readers
                    </Tab>
                    <Tab Name="feedback" ElementId="feedback-tab">
                        <Icon Name="IconName.Bell" Margin="Margin.Is2.FromEnd" />
                        Feedback
                    </Tab>
                    <Tab Name="plugins" ElementId="plugins-tab">
                        <Icon Name="IconName.PuzzlePiece" Margin="Margin.Is2.FromEnd" />
                        Plugins
                    </Tab>
                    <Tab Name="system" ElementId="system-tab">
                        <Icon Name="IconName.Settings" Margin="Margin.Is2.FromEnd" />
                        System
                    </Tab>
                </Items>
                <Content>
                    <TabPanel Name="readers">
                        <ReadersConfiguration OnShowMessage="HandleShowMessage" />
                    </TabPanel>
                    <TabPanel Name="feedback">
                        <FeedbackConfiguration OnShowMessage="HandleShowMessage" />
                    </TabPanel>
                    <TabPanel Name="plugins">
                        <PluginsConfiguration OnShowMessage="HandleShowMessage" />
                    </TabPanel>
                    <TabPanel Name="system">
                        <SystemConfiguration OnShowMessage="HandleShowMessage" />
                    </TabPanel>
                </Content>
            </Tabs>
        </Column>
    </Row>
</Container>

<!-- Status Messages -->
@if (!string.IsNullOrEmpty(statusMessage))
{
    <Toast @ref="statusToast" Visible="true" ElementId="status-toast">
        <ToastHeader>
            <Icon Name="@GetToastIcon()" Margin="Margin.Is2.FromEnd" />
            <Strong Margin="Margin.IsAuto.FromEnd">@GetToastTitle()</Strong>
            <CloseButton Clicked="ClearStatusMessage" />
        </ToastHeader>
        <ToastBody>
            @statusMessage
        </ToastBody>
    </Toast>
}

@code {
    private string activeTab = "readers";
    private string statusMessage = "";
    private string statusMessageType = "info";
    private Toast? statusToast;

    private Task OnSelectedTabChanged(string name)
    {
        activeTab = name;
        return Task.CompletedTask;
    }

    private async Task HandleShowMessage(string message)
    {
        var parts = message.Split('|');
        if (parts.Length == 2)
        {
            statusMessage = parts[0];
            statusMessageType = parts[1];
        }
        else
        {
            statusMessage = message;
            statusMessageType = "info";
        }
        
        StateHasChanged();
        
        // Auto-hide after 5 seconds
        await Task.Delay(5000);
        if (statusMessage == parts[0]) // Only clear if it's still the same message
        {
            ClearStatusMessage();
        }
    }

    private void ClearStatusMessage()
    {
        statusMessage = "";
        StateHasChanged();
    }

    private IconName GetToastIcon()
    {
        return statusMessageType switch
        {
            "success" => IconName.Check,
            "warning" => IconName.ExclamationTriangle,
            "danger" => IconName.ExclamationCircle,
            _ => IconName.Info
        };
    }

    private string GetToastTitle()
    {
        return statusMessageType switch
        {
            "success" => "Success",
            "warning" => "Warning",
            "danger" => "Error",
            _ => "Information"
        };
    }
}