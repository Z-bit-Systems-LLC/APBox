@using ApBox.Plugins
@using ApBox.Web.ViewModels

@inject PluginsConfigurationViewModel ViewModel
@implements IAsyncDisposable

<Container Fluid>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is3" ElementId="plugins-title">Loaded Plugins</Heading>
            <Paragraph TextColor="TextColor.Muted">Plugins are automatically loaded from the plugins directory</Paragraph>
        </Column>
        <Column ColumnSize="ColumnSize.IsAuto">
            <Button Color="Color.Primary" Outline="true" Clicked="() => ViewModel.RefreshCommand.Execute(null)" Loading="ViewModel.IsLoading" ElementId="refresh-plugins-btn">
                <Icon Name="IconName.Sync" Margin="Margin.Is2.FromEnd" />
                Refresh Plugins
            </Button>
        </Column>
    </Row>

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <Alert Color="Color.Danger" Visible="true">
            <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
            @ViewModel.ErrorMessage
        </Alert>
    }

    @if (ViewModel.IsLoading)
    {
        <Row>
            <Column>
                <Alert Color="Color.Info" Visible="true">
                    <AlertMessage ElementId="loading-alert">
                        <Icon Name="IconName.Sync" Animation="Animation.Spin" Margin="Margin.Is2.FromEnd" />
                        Loading plugins...
                    </AlertMessage>
                </Alert>
            </Column>
        </Row>
    }
    else if (ViewModel.LoadedPlugins.Any())
    {
        <Row>
            @foreach (var plugin in ViewModel.LoadedPlugins)
            {
                <Column ColumnSize="ColumnSize.Is6.OnTablet.Is4.OnDesktop" Margin="Margin.Is4.FromBottom">
                    <Card Height="Height.Is100">
                        <CardHeader>
                            <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                                <Icon Name="IconName.Code" Margin="Margin.Is2.FromEnd" />
                                @plugin.Name
                            </CardTitle>
                            <CardSubtitle Size="8" TextColor="TextColor.Muted">
                                Version @plugin.Version
                            </CardSubtitle>
                        </CardHeader>
                        <CardBody>
                            <CardText>
                                @plugin.Description
                            </CardText>
                            <Div Margin="Margin.Is3.FromTop">
                                <Badge Color="Color.Success" ElementId="@($"plugin-status-{plugin.Name}")">
                                    <Icon Name="IconName.Check" Margin="Margin.Is1.FromEnd" />
                                    Loaded
                                </Badge>
                            </Div>
                        </CardBody>
                    </Card>
                </Column>
            }
        </Row>
    }
    else
    {
        <Row>
            <Column>
                <Card>
                    <CardBody TextAlignment="TextAlignment.Center" Padding="Padding.Is5.OnY">
                        <Icon Name="IconName.Code" Size="IconSize.x5" TextColor="TextColor.Muted" Margin="Margin.Is3.FromBottom" />
                        <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromTop">No Plugins Loaded</Heading>
                        <Paragraph TextColor="TextColor.Muted">
                            Place plugin DLLs in the plugins directory and restart the application
                        </Paragraph>
                    </CardBody>
                </Card>
            </Column>
        </Row>
    }
</Container>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
{
    <Snackbar @ref="_successSnackbar" Color="SnackbarColor.Success" Visible="true">
        <SnackbarBody>
            <Icon Name="IconName.Check" Margin="Margin.Is2.FromEnd" />
            @ViewModel.SuccessMessage
        </SnackbarBody>
    </Snackbar>
}

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    private Snackbar? _successSnackbar;

    protected override async Task OnInitializedAsync()
    {
        // Set up component callbacks for the ViewModel
        ViewModel.StateHasChanged = StateHasChanged;
        ViewModel.InvokeAsync = InvokeAsync;
        
        // Initialize the ViewModel
        await ViewModel.InitializeAsync();
        
        // Watch for success messages
        ViewModel.PropertyChanged += async (sender, args) =>
        {
            if (args.PropertyName == nameof(ViewModel.SuccessMessage) && !string.IsNullOrEmpty(ViewModel.SuccessMessage))
            {
                await ShowSuccessMessage();
            }
            
            if (args.PropertyName == nameof(ViewModel.ErrorMessage) && !string.IsNullOrEmpty(ViewModel.ErrorMessage))
            {
                await OnShowMessage.InvokeAsync($"{ViewModel.ErrorMessage}|danger");
            }
        };
    }

    private async Task ShowSuccessMessage()
    {
        StateHasChanged();
        
        // Auto-hide after 3 seconds
        await Task.Delay(3000);
        ViewModel.SuccessMessage = null;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await ViewModel.DisposeAsync();
    }
}