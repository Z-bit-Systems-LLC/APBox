@using ApBox.Core.Services
@using ApBox.Core.Models
@using ApBox.Web.ViewModels

@inject FeedbackConfigurationViewModel ViewModel
@implements IAsyncDisposable

<Container Fluid>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is3" ElementId="feedback-title">Default Feedback Configuration</Heading>
            <Paragraph TextColor="TextColor.Muted">Configure default feedback patterns for successful and failed card reads</Paragraph>
        </Column>
        <Column ColumnSize="ColumnSize.IsAuto">
            <Button Color="Color.Secondary" Outline="true" Clicked="() => ViewModel.ShowResetConfirmationCommand.Execute(null)" ElementId="reset-to-defaults-btn">
                <Icon Name="IconName.Undo" Margin="Margin.Is2.FromEnd" />
                Reset to Defaults
            </Button>
        </Column>
    </Row>

    @if (ViewModel.IsLoading)
    {
        <Row>
            <Column>
                <Alert Color="Color.Info" Visible="true">
                    <AlertMessage>
                        <Icon Name="IconName.Sync" Animation="Animation.Spin" Margin="Margin.Is2.FromEnd" />
                        Loading feedback configuration...
                    </AlertMessage>
                </Alert>
            </Column>
        </Row>
    }
    else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <Alert Color="Color.Danger" Visible="true">
            <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
            @ViewModel.ErrorMessage
        </Alert>
    }
    else
    {
        <Row>
            <Column ColumnSize="ColumnSize.Is6.OnTablet">
                <Card>
                    <CardHeader Background="Background.Success" TextColor="TextColor.White">
                        <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                            <Icon Name="IconName.Check" Margin="Margin.Is2.FromEnd" />Success Feedback
                        </CardTitle>
                    </CardHeader>
                    <CardBody>
                        <Field>
                            <FieldLabel>LED Color</FieldLabel>
                            <Select @bind-SelectedValue="ViewModel.SuccessLedColor" ElementId="success-led-color">
                                <SelectItem Value="LedColor.Green">Green</SelectItem>
                                <SelectItem Value="LedColor.Red">Red</SelectItem>
                                <SelectItem Value="LedColor.Amber">Amber</SelectItem>
                                <SelectItem Value="LedColor.Blue">Blue</SelectItem>
                            </Select>
                        </Field>
                        <Field>
                            <FieldLabel>LED Duration (seconds)</FieldLabel>
                            <NumericEdit @bind-Value="ViewModel.SuccessLedDurationSeconds" Min="1" Max="10" Step="1" ElementId="success-led-duration" />
                        </Field>
                        <Field>
                            <FieldLabel>Beep Count</FieldLabel>
                            <NumericEdit @bind-Value="ViewModel.SuccessBeepCount" Min="0" Max="10" ElementId="success-beep-count" />
                        </Field>
                        <Field>
                            <FieldLabel>Display Message</FieldLabel>
                            <TextEdit @bind-Text="ViewModel.SuccessDisplayMessage" MaxLength="16" ElementId="success-display-message" />
                            <FieldHelp>Maximum 16 characters for OSDP display (optional)</FieldHelp>
                        </Field>
                        
                        <!-- Success Preview -->
                        <Card Background="Background.Light" Margin="Margin.Is3.FromTop">
                            <CardBody>
                                <Heading Size="HeadingSize.Is6">Preview</Heading>
                                <Div Flex="Flex.JustifyContent.Start.AlignItems.Center" Margin="Margin.Is2.FromBottom">
                                    <Badge Color="@GetFeedbackBadgeColor(ViewModel.SuccessLedColor)" Margin="Margin.Is2.FromEnd" ElementId="success-led-color-badge">
                                        @ViewModel.SuccessLedColor
                                    </Badge>
                                    <Badge Color="Color.Info" Margin="Margin.Is2.FromEnd">@ViewModel.SuccessLedDurationSeconds sec</Badge>
                                    <Badge Color="Color.Secondary">@ViewModel.SuccessBeepCount beeps</Badge>
                                </Div>
                                <Div Border="Border.Is1" Padding="Padding.Is2" Background="Background.White">
                                    <Small TextColor="TextColor.Dark" TextStyle="TextStyle.Monospace">@ViewModel.SuccessDisplayMessage</Small>
                                </Div>
                            </CardBody>
                        </Card>
                    </CardBody>
                </Card>
            </Column>

            <Column ColumnSize="ColumnSize.Is6.OnTablet">
                <Card>
                    <CardHeader Background="Background.Danger" TextColor="TextColor.White">
                        <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                            <Icon Name="IconName.Times" Margin="Margin.Is2.FromEnd" />Failure Feedback
                        </CardTitle>
                    </CardHeader>
                    <CardBody>
                        <Field>
                            <FieldLabel>LED Color</FieldLabel>
                            <Select @bind-SelectedValue="ViewModel.FailureLedColor" ElementId="failure-led-color">
                                <SelectItem Value="LedColor.Green">Green</SelectItem>
                                <SelectItem Value="LedColor.Red">Red</SelectItem>
                                <SelectItem Value="LedColor.Amber">Amber</SelectItem>
                                <SelectItem Value="LedColor.Blue">Blue</SelectItem>
                            </Select>
                        </Field>
                        <Field>
                            <FieldLabel>LED Duration (seconds)</FieldLabel>
                            <NumericEdit @bind-Value="ViewModel.FailureLedDurationSeconds" Min="1" Max="10" Step="1" ElementId="failure-led-duration" />
                        </Field>
                        <Field>
                            <FieldLabel>Beep Count</FieldLabel>
                            <NumericEdit @bind-Value="ViewModel.FailureBeepCount" Min="0" Max="10" ElementId="failure-beep-count" />
                        </Field>
                        <Field>
                            <FieldLabel>Display Message</FieldLabel>
                            <TextEdit @bind-Text="ViewModel.FailureDisplayMessage" MaxLength="16" ElementId="failure-display-message" />
                            <FieldHelp>Maximum 16 characters for OSDP display (optional)</FieldHelp>
                        </Field>
                        
                        <!-- Failure Preview -->
                        <Card Background="Background.Light" Margin="Margin.Is3.FromTop">
                            <CardBody>
                                <Heading Size="HeadingSize.Is6">Preview</Heading>
                                <Div Flex="Flex.JustifyContent.Start.AlignItems.Center" Margin="Margin.Is2.FromBottom">
                                    <Badge Color="@GetFeedbackBadgeColor(ViewModel.FailureLedColor)" Margin="Margin.Is2.FromEnd">
                                        @ViewModel.FailureLedColor
                                    </Badge>
                                    <Badge Color="Color.Info" Margin="Margin.Is2.FromEnd">@ViewModel.FailureLedDurationSeconds sec</Badge>
                                    <Badge Color="Color.Secondary">@ViewModel.FailureBeepCount beeps</Badge>
                                </Div>
                                <Div Border="Border.Is1" Padding="Padding.Is2" Background="Background.White">
                                    <Small TextColor="TextColor.Dark" TextStyle="TextStyle.Monospace">@ViewModel.FailureDisplayMessage</Small>
                                </Div>
                            </CardBody>
                        </Card>
                    </CardBody>
                </Card>
            </Column>
        </Row>

        <Row Margin="Margin.Is4.FromTop">
            <Column>
                <Card>
                    <CardHeader Background="Background.Info" TextColor="TextColor.White">
                        <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                            <Icon Name="IconName.Clock" Margin="Margin.Is2.FromEnd" />Idle State Configuration
                        </CardTitle>
                    </CardHeader>
                    <CardBody>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is6.OnTablet">
                                <Field>
                                    <FieldLabel>Permanent LED Color</FieldLabel>
                                    <Select @bind-SelectedValue="ViewModel.IdlePermanentLedColor" ElementId="idle-permanent-led-color">
                                        <SelectItem Value="LedColor.Off">Off (No LED)</SelectItem>
                                        <SelectItem Value="LedColor.Green">Green</SelectItem>
                                        <SelectItem Value="LedColor.Red">Red</SelectItem>
                                        <SelectItem Value="LedColor.Amber">Amber</SelectItem>
                                        <SelectItem Value="LedColor.Blue">Blue</SelectItem>
                                    </Select>
                                    <FieldHelp>LED color shown when reader is idle</FieldHelp>
                                </Field>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is6.OnTablet">
                                <Field>
                                    <FieldLabel>Heartbeat Flash Color</FieldLabel>
                                    <Select @bind-SelectedValue="ViewModel.IdleHeartbeatFlashColor" ElementId="idle-heartbeat-flash-color">
                                        <SelectItem Value="LedColor.Off">Off (No Flash)</SelectItem>
                                        <SelectItem Value="LedColor.Green">Green</SelectItem>
                                        <SelectItem Value="LedColor.Red">Red</SelectItem>
                                        <SelectItem Value="LedColor.Amber">Amber</SelectItem>
                                        <SelectItem Value="LedColor.Blue">Blue</SelectItem>
                                    </Select>
                                    <FieldHelp>Brief flash color to indicate reader is active</FieldHelp>
                                </Field>
                            </Column>
                        </Row>
                        
                        <!-- Idle State Preview -->
                        <Card Background="Background.Light" Margin="Margin.Is3.FromTop">
                            <CardBody>
                                <Heading Size="HeadingSize.Is6">Preview</Heading>
                                <Div Flex="Flex.JustifyContent.Start.AlignItems.Center" Margin="Margin.Is2.FromBottom">
                                    <Badge Color="@GetFeedbackBadgeColor(ViewModel.IdlePermanentLedColor)" Margin="Margin.Is2.FromEnd">
                                        Permanent: @ViewModel.IdlePermanentLedColor
                                    </Badge>
                                    <Badge Color="@GetFeedbackBadgeColor(ViewModel.IdleHeartbeatFlashColor)">
                                        Flash: @ViewModel.IdleHeartbeatFlashColor
                                    </Badge>
                                </Div>
                            </CardBody>
                        </Card>
                    </CardBody>
                </Card>
            </Column>
        </Row>

    }
</Container>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
{
    <Snackbar @ref="_successSnackbar" Color="SnackbarColor.Success" Visible="true">
        <SnackbarBody>
            <Icon Name="IconName.Check" Margin="Margin.Is2.FromEnd" />
            @ViewModel.SuccessMessage
        </SnackbarBody>
    </Snackbar>
}

<!-- Reset Confirmation Modal -->
<Modal @bind-Visible="ViewModel.ShowResetModal" ElementId="reset-confirmation-modal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Reset to Default Configuration</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Text>Are you sure you want to reset all feedback settings to their default values?</Text>
            <Text TextColor="TextColor.Muted" Margin="Margin.Is2.FromTop">This action will overwrite your current configuration.</Text>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => ViewModel.CancelResetCommand.Execute(null)" ElementId="reset-cancel-btn">Cancel</Button>
            <Button Color="Color.Warning" Clicked="() => ViewModel.ResetToDefaultsCommand.Execute(null)" Loading="ViewModel.IsResetting" ElementId="reset-confirm-btn">
                <Icon Name="IconName.Undo" Margin="Margin.Is2.FromEnd" />
                Reset to Defaults
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    private Snackbar? _successSnackbar;

    protected override async Task OnInitializedAsync()
    {
        // Set up component callbacks for the ViewModel
        ViewModel.StateHasChanged = StateHasChanged;
        ViewModel.InvokeAsync = InvokeAsync;
        
        // Initialize the ViewModel
        await ViewModel.InitializeAsync();
        
        // Watch for success messages
        ViewModel.PropertyChanged += async (sender, args) =>
        {
            if (args.PropertyName == nameof(ViewModel.SuccessMessage) && !string.IsNullOrEmpty(ViewModel.SuccessMessage))
            {
                await ShowSuccessMessage();
            }
        };
    }

    private async Task ShowSuccessMessage()
    {
        StateHasChanged();
        
        // Auto-hide after 3 seconds
        await Task.Delay(3000);
        ViewModel.SuccessMessage = null;
        StateHasChanged();
    }

    private Color GetFeedbackBadgeColor(LedColor ledColor)
    {
        return ledColor switch
        {
            LedColor.Green => Color.Success,
            LedColor.Red => Color.Danger,
            LedColor.Amber => Color.Warning,
            LedColor.Blue => Color.Info,
            _ => Color.Secondary
        };
    }

    public async ValueTask DisposeAsync()
    {
        await ViewModel.DisposeAsync();
    }
}