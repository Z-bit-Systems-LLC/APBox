@using ApBox.Core.Services
@using ApBox.Core.Models
@using ApBox.Plugins
@using Microsoft.Extensions.Logging
@inject IReaderConfigurationService ReaderConfigurationService
@inject IPluginLoader PluginLoader
@inject IConfigurationExportService ConfigurationExportService
@inject ISystemRestartService SystemRestartService
@inject ILogService LogService
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<Container Fluid>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is3" ElementId="system-title">System Information</Heading>
            <Paragraph TextColor="TextColor.Muted">System status, diagnostics, and configuration management</Paragraph>
        </Column>
    </Row>

    <Row>
        <!-- System Status Card -->
        <Column ColumnSize="ColumnSize.Is8.OnTablet">
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.Info" Margin="Margin.Is2.FromEnd" />
                        System Status
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Application</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>ApBox Gateway v@_systemInfo.ApBoxVersion</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Framework</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@_systemInfo.Framework</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Platform</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@_systemInfo.Platform</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Machine Name</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@_systemInfo.MachineName</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Processor Count</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@_systemInfo.ProcessorCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Active Readers</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="reader-count">@_readerCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Loaded Plugins</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="plugin-count">@_pluginCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Plugin Directory</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Code>@_pluginDirectory</Code>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">System Status</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Badge Color="Color.Success" ElementId="system-status">
                                <Icon Name="IconName.Check" Margin="Margin.Is1.FromEnd" />
                                Online
                            </Badge>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Uptime</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="system-uptime">@GetSystemUptime()</Text>
                        </Column>
                    </Row>

                    <Row>
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Database</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Badge Color="Color.Success" ElementId="database-status">
                                <Icon Name="IconName.Server" Margin="Margin.Is1.FromEnd" />
                                Connected
                            </Badge>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>

        <!-- Actions and Quick Stats Column -->
        <Column ColumnSize="ColumnSize.Is4.OnTablet">
            <!-- Actions Card -->
            <Card Margin="Margin.Is3.FromBottom">
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.Settings" Margin="Margin.Is2.FromEnd" />
                        Actions
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Div Display="Display.Flex" Flex="Flex.Column" Gap="Gap.Is2">
                        <Button Color="Color.Primary" Outline="true" @onclick="RefreshSystemInfo" Loading="_refreshing" ElementId="refresh-system-btn">
                            <Icon Name="IconName.Sync" Margin="Margin.Is2.FromEnd" />
                            Refresh System Info
                        </Button>
                        
                        <Button Color="Color.Info" Outline="true" @onclick="ExportConfiguration" Loading="_exporting" ElementId="export-config-btn">
                            <Icon Name="IconName.Download" Margin="Margin.Is2.FromEnd" />
                            Export Config
                        </Button>
                        
                        <Button Color="Color.Warning" Outline="true" @onclick="ImportConfiguration" Loading="_importing" ElementId="import-config-btn">
                            <Icon Name="IconName.FileUpload" Margin="Margin.Is2.FromEnd" />
                            Import Config
                        </Button>
                        
                        <Button Color="Color.Danger" Outline="true" @onclick="ShowRestartModal" ElementId="restart-system-btn">
                            <Icon Name="IconName.Stop" Margin="Margin.Is2.FromEnd" />
                            Restart System
                        </Button>
                    </Div>
                </CardBody>
            </Card>

            <!-- Quick Stats Card -->
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.ChartBar" Margin="Margin.Is2.FromEnd" />
                        Quick Stats
                    </CardTitle>
                </CardHeader>
                <CardBody TextAlignment="TextAlignment.Center">
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6" Style="border-right: 1px solid var(--bs-border-color);">
                            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Primary" Margin="Margin.Is1.FromBottom">@_readerCount</Heading>
                            <Small TextColor="TextColor.Muted">Readers</Small>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6">
                            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success" Margin="Margin.Is1.FromBottom">@_pluginCount</Heading>
                            <Small TextColor="TextColor.Muted">Plugins</Small>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <!-- System Logs Section -->
    <Row Margin="Margin.Is4.FromTop">
        <Column>
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.List" Margin="Margin.Is2.FromEnd" />
                        System Logs
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Alert Color="Color.Info" Visible="true">
                        <AlertMessage>
                            <Icon Name="IconName.Info" Margin="Margin.Is2.FromEnd" />
                            System logging viewer will be implemented here. This will show recent application logs, errors, and diagnostic information.
                        </AlertMessage>
                    </Alert>
                    <!-- Log Filter Controls -->
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Select TValue="LogLevel" @bind-SelectedValue="_selectedLogLevel" @bind-SelectedValue:after="FilterLogs">
                                <SelectItem TValue="LogLevel" Value="LogLevel.Trace">All Levels</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Debug">Debug+</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Information">Info+</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Warning">Warning+</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Error">Error+</SelectItem>
                            </Select>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6">
                            <TextEdit @bind-Text="_searchTerm" @bind-Text:after="FilterLogs" Placeholder="Search logs..." />
                        </Column>
                        <Column ColumnSize="ColumnSize.Is2">
                            <Button Color="Color.Secondary" Outline="true" Size="Size.Small" @onclick="ExportLogs" Loading="_exportingLogs" ElementId="download-logs-btn">
                                <Icon Name="IconName.Download" Margin="Margin.Is1.FromEnd" />
                                Export
                            </Button>
                        </Column>
                    </Row>

                    <!-- Log Entries -->
                    <Div Style="max-height: 400px; overflow-y: auto; border: 1px solid var(--bs-border-color); border-radius: 0.375rem; padding: 0.75rem;">
                        @if (_filteredLogs?.Any() == true)
                        {
                            @foreach (var log in _filteredLogs.Take(100))
                            {
                                <Div Style="font-family: monospace; font-size: 0.875rem; margin-bottom: 0.5rem; padding-bottom: 0.5rem; border-bottom: 1px solid var(--bs-border-color-translucent);">
                                    <Div Display="Display.Flex" JustifyContent="JustifyContent.Between" Margin="Margin.Is1.FromBottom">
                                        <Small TextColor="TextColor.Muted">@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</Small>
                                        <Badge Color="@GetLogLevelColor(log.Level)" Pill="true">@log.LevelDisplay</Badge>
                                    </Div>
                                    <Text TextColor="@GetLogLevelTextColor(log.Level)" Style="font-weight: 500;">[@log.Source] @log.Message</Text>
                                    @if (!string.IsNullOrEmpty(log.Exception))
                                    {
                                        <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" Background="Background.Light" Border="Border.Light" Style="border-radius: 0.25rem;">
                                            <Small TextColor="TextColor.Danger" Style="font-family: monospace; white-space: pre-wrap;">@log.Exception</Small>
                                        </Div>
                                    }
                                </Div>
                            }
                        }
                        else
                        {
                            <Paragraph TextColor="TextColor.Muted" TextAlignment="TextAlignment.Center">No logs available</Paragraph>
                        }
                    </Div>
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

<!-- Restart Confirmation Modal -->
<Modal @ref="_restartModal" ElementId="restart-confirmation-modal">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Restart System</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Warning" Visible="true">
                <AlertMessage>
                    <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
                    <strong>Warning:</strong> This will restart the ApBox application and temporarily interrupt service.
                </AlertMessage>
            </Alert>
            <Paragraph>Are you sure you want to restart the system?</Paragraph>
            <UnorderedList TextColor="TextColor.Muted">
                <UnorderedListItem>All active connections will be closed</UnorderedListItem>
                <UnorderedListItem>Plugin states will be reset</UnorderedListItem>
                <UnorderedListItem>The restart should complete within 30 seconds</UnorderedListItem>
            </UnorderedList>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="CloseRestartModal" ElementId="restart-cancel-btn">
                Cancel
            </Button>
            <Button Color="Color.Danger" @onclick="ConfirmRestart" Loading="_restarting" ElementId="restart-confirm-btn">
                <Icon Name="IconName.Stop" Margin="Margin.Is2.FromEnd" />
                Restart System
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    private int _readerCount = 0;
    private int _pluginCount = 0;
    private SystemInfo _systemInfo = new();
    private string _pluginDirectory = "plugins/";
    private bool _refreshing = false;
    private bool _exporting = false;
    private bool _importing = false;
    private bool _restarting = false;
    private bool _exportingLogs = false;
    private DateTime _startTime = DateTime.UtcNow;
    
    // Modal reference
    private Modal? _restartModal;
    
    // Log viewer state
    private IEnumerable<LogEntry>? _recentLogs;
    private IEnumerable<LogEntry>? _filteredLogs;
    private LogLevel _selectedLogLevel = LogLevel.Information;
    private string _searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadSystemInfo();
        await LoadRecentLogs();
    }

    private async Task LoadSystemInfo()
    {
        try
        {
            var readers = await ReaderConfigurationService.GetAllReadersAsync();
            _readerCount = readers.Count();
            
            var plugins = await PluginLoader.LoadPluginsAsync();
            _pluginCount = plugins.Count();
            
            // Get plugin directory from configuration
            _pluginDirectory = Configuration.GetValue<string>("PluginSettings:Directory") ?? "plugins/";
            
            // Initialize system info with current values
            _systemInfo = new SystemInfo();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error loading system info: {ex.Message}|danger");
        }
    }

    private async Task RefreshSystemInfo()
    {
        _refreshing = true;
        StateHasChanged();
        
        try
        {
            await LoadSystemInfo();
            await OnShowMessage.InvokeAsync("System information refreshed|success");
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error refreshing system info: {ex.Message}|danger");
        }
        finally
        {
            _refreshing = false;
            StateHasChanged();
        }
    }

    private async Task ExportConfiguration()
    {
        _exporting = true;
        StateHasChanged();
        
        try
        {
            var exportData = await ConfigurationExportService.ExportConfigurationAsync();
            var json = System.Text.Json.JsonSerializer.Serialize(exportData, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
            });
            
            var fileName = $"apbox-config-{DateTime.UtcNow:yyyyMMdd-HHmmss}.json";
            var bytes = System.Text.Encoding.UTF8.GetBytes(json);
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/json", bytes);
            await OnShowMessage.InvokeAsync("Configuration exported successfully|success");
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error exporting configuration: {ex.Message}|danger");
        }
        finally
        {
            _exporting = false;
            StateHasChanged();
        }
    }

    private async Task ImportConfiguration()
    {
        _importing = true;
        StateHasChanged();
        
        try
        {
            // Note: File upload would normally be handled through a file input
            // For now, show a message about the feature
            await OnShowMessage.InvokeAsync("Configuration import requires file upload implementation|info");
        }
        finally
        {
            _importing = false;
            StateHasChanged();
        }
    }

    private async Task ShowRestartModal()
    {
        if (_restartModal != null)
        {
            await _restartModal.Show();
        }
    }

    private async Task CloseRestartModal()
    {
        if (_restartModal != null)
        {
            await _restartModal.Hide();
        }
    }

    private async Task ConfirmRestart()
    {
        _restarting = true;
        StateHasChanged();
        
        try
        {
            var canRestart = await SystemRestartService.CanRestartAsync();
            if (!canRestart)
            {
                await OnShowMessage.InvokeAsync("System cannot be restarted at this time|warning");
                return;
            }
            
            await OnShowMessage.InvokeAsync("Preparing system for restart...|info");
            await SystemRestartService.PrepareRestartAsync();
            
            await OnShowMessage.InvokeAsync("Restarting system...|warning");
            await SystemRestartService.RestartApplicationAsync();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error restarting system: {ex.Message}|danger");
        }
        finally
        {
            _restarting = false;
            await CloseRestartModal();
        }
    }

    private string GetSystemUptime()
    {
        var uptime = DateTime.UtcNow - _startTime;
        return $"{uptime.Days}d {uptime.Hours}h {uptime.Minutes}m";
    }
    
    private async Task LoadRecentLogs()
    {
        try
        {
            _recentLogs = await LogService.GetRecentLogsAsync(100);
            await FilterLogs();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error loading logs: {ex.Message}|danger");
        }
    }
    
    private async Task FilterLogs()
    {
        if (_recentLogs == null)
        {
            _filteredLogs = Enumerable.Empty<LogEntry>();
            StateHasChanged();
            return;
        }
        
        var filtered = _recentLogs.Where(l => l.Level >= _selectedLogLevel);
        
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filtered = filtered.Where(l => 
                l.Message.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                l.Source.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (l.Exception?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }
        
        _filteredLogs = filtered.OrderByDescending(l => l.Timestamp);
        StateHasChanged();
    }
    
    private async Task ExportLogs()
    {
        _exportingLogs = true;
        StateHasChanged();
        
        try
        {
            var logData = await LogService.ExportLogsAsync();
            var fileName = $"apbox-logs-{DateTime.UtcNow:yyyyMMdd-HHmmss}.json";
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/json", logData);
            await OnShowMessage.InvokeAsync("Logs exported successfully|success");
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error exporting logs: {ex.Message}|danger");
        }
        finally
        {
            _exportingLogs = false;
            StateHasChanged();
        }
    }
    
    private Color GetLogLevelColor(LogLevel level) => level switch
    {
        LogLevel.Trace => Color.Light,
        LogLevel.Debug => Color.Secondary,
        LogLevel.Information => Color.Info,
        LogLevel.Warning => Color.Warning,
        LogLevel.Error => Color.Danger,
        LogLevel.Critical => Color.Dark,
        _ => Color.Light
    };
    
    private TextColor GetLogLevelTextColor(LogLevel level) => level switch
    {
        LogLevel.Trace => TextColor.Muted,
        LogLevel.Debug => TextColor.Secondary,
        LogLevel.Information => TextColor.Info,
        LogLevel.Warning => TextColor.Warning,
        LogLevel.Error => TextColor.Danger,
        LogLevel.Critical => TextColor.Dark,
        _ => TextColor.Body
    };
}