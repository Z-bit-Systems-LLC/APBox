@using ApBox.Core.Services
@using ApBox.Plugins
@inject IReaderConfigurationService ReaderConfigurationService
@inject IPluginLoader PluginLoader

<Container Fluid>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is3" ElementId="system-title">System Information</Heading>
            <Paragraph TextColor="TextColor.Muted">System status, diagnostics, and configuration management</Paragraph>
        </Column>
    </Row>

    <Row>
        <!-- System Status Card -->
        <Column ColumnSize="ColumnSize.Is8.OnTablet">
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.Info" Margin="Margin.Is2.FromEnd" />
                        System Status
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Application</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>ApBox Gateway v1.0.0</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Framework</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>.NET 8</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Active Readers</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="reader-count">@_readerCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Loaded Plugins</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="plugin-count">@_pluginCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Plugin Directory</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Code>plugins/</Code>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">System Status</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Badge Color="Color.Success" ElementId="system-status">
                                <Icon Name="IconName.Check" Margin="Margin.Is1.FromEnd" />
                                Online
                            </Badge>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Uptime</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="system-uptime">@GetSystemUptime()</Text>
                        </Column>
                    </Row>

                    <Row>
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Database</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Badge Color="Color.Success" ElementId="database-status">
                                <Icon Name="IconName.Server" Margin="Margin.Is1.FromEnd" />
                                Connected
                            </Badge>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>

        <!-- Actions and Quick Stats Column -->
        <Column ColumnSize="ColumnSize.Is4.OnTablet">
            <!-- Actions Card -->
            <Card Margin="Margin.Is3.FromBottom">
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.Settings" Margin="Margin.Is2.FromEnd" />
                        Actions
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Div Display="Display.Flex" Flex="Flex.Column" Gap="Gap.Is2">
                        <Button Color="Color.Primary" Outline="true" @onclick="RefreshSystemInfo" Loading="_refreshing" ElementId="refresh-system-btn">
                            <Icon Name="IconName.Sync" Margin="Margin.Is2.FromEnd" />
                            Refresh System Info
                        </Button>
                        
                        <Button Color="Color.Info" Outline="true" @onclick="ExportConfiguration" Loading="_exporting" ElementId="export-config-btn">
                            <Icon Name="IconName.Download" Margin="Margin.Is2.FromEnd" />
                            Export Config
                        </Button>
                        
                        <Button Color="Color.Warning" Outline="true" @onclick="ImportConfiguration" Loading="_importing" ElementId="import-config-btn">
                            <Icon Name="IconName.FileUpload" Margin="Margin.Is2.FromEnd" />
                            Import Config
                        </Button>
                        
                        <Button Color="Color.Danger" Outline="true" @onclick="ShowRestartModal" ElementId="restart-system-btn">
                            <Icon Name="IconName.Stop" Margin="Margin.Is2.FromEnd" />
                            Restart System
                        </Button>
                    </Div>
                </CardBody>
            </Card>

            <!-- Quick Stats Card -->
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.ChartBar" Margin="Margin.Is2.FromEnd" />
                        Quick Stats
                    </CardTitle>
                </CardHeader>
                <CardBody TextAlignment="TextAlignment.Center">
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6" Style="border-right: 1px solid var(--bs-border-color);">
                            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Primary" Margin="Margin.Is1.FromBottom">@_readerCount</Heading>
                            <Small TextColor="TextColor.Muted">Readers</Small>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6">
                            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success" Margin="Margin.Is1.FromBottom">@_pluginCount</Heading>
                            <Small TextColor="TextColor.Muted">Plugins</Small>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <!-- System Logs Section -->
    <Row Margin="Margin.Is4.FromTop">
        <Column>
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.List" Margin="Margin.Is2.FromEnd" />
                        System Logs
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Alert Color="Color.Info" Visible="true">
                        <AlertMessage>
                            <Icon Name="IconName.Info" Margin="Margin.Is2.FromEnd" />
                            System logging viewer will be implemented here. This will show recent application logs, errors, and diagnostic information.
                        </AlertMessage>
                    </Alert>
                    <Div Display="Display.Flex" JustifyContent="JustifyContent.Between">
                        <Button Color="Color.Primary" Outline="true" Size="Size.Small" ElementId="view-logs-btn">
                            <Icon Name="IconName.Eye" Margin="Margin.Is1.FromEnd" />
                            View Logs
                        </Button>
                        <Button Color="Color.Secondary" Outline="true" Size="Size.Small" ElementId="download-logs-btn">
                            <Icon Name="IconName.Download" Margin="Margin.Is1.FromEnd" />
                            Download Logs
                        </Button>
                    </Div>
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

<!-- Restart Confirmation Modal -->
<Modal @ref="_restartModal" ElementId="restart-confirmation-modal">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Restart System</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Warning" Visible="true">
                <AlertMessage>
                    <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
                    <strong>Warning:</strong> This will restart the ApBox application and temporarily interrupt service.
                </AlertMessage>
            </Alert>
            <Paragraph>Are you sure you want to restart the system?</Paragraph>
            <UnorderedList TextColor="TextColor.Muted">
                <UnorderedListItem>All active connections will be closed</UnorderedListItem>
                <UnorderedListItem>Plugin states will be reset</UnorderedListItem>
                <UnorderedListItem>The restart should complete within 30 seconds</UnorderedListItem>
            </UnorderedList>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="CloseRestartModal" ElementId="restart-cancel-btn">
                Cancel
            </Button>
            <Button Color="Color.Danger" @onclick="ConfirmRestart" Loading="_restarting" ElementId="restart-confirm-btn">
                <Icon Name="IconName.Stop" Margin="Margin.Is2.FromEnd" />
                Restart System
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    private int _readerCount = 0;
    private int _pluginCount = 0;
    private bool _refreshing = false;
    private bool _exporting = false;
    private bool _importing = false;
    private bool _restarting = false;
    private DateTime _startTime = DateTime.UtcNow;
    
    // Modal reference
    private Modal? _restartModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadSystemInfo();
    }

    private async Task LoadSystemInfo()
    {
        try
        {
            var readers = await ReaderConfigurationService.GetAllReadersAsync();
            _readerCount = readers.Count();
            
            var plugins = await PluginLoader.LoadPluginsAsync();
            _pluginCount = plugins.Count();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error loading system info: {ex.Message}|danger");
        }
    }

    private async Task RefreshSystemInfo()
    {
        _refreshing = true;
        StateHasChanged();
        
        try
        {
            await LoadSystemInfo();
            await OnShowMessage.InvokeAsync("System information refreshed|success");
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error refreshing system info: {ex.Message}|danger");
        }
        finally
        {
            _refreshing = false;
            StateHasChanged();
        }
    }

    private async Task ExportConfiguration()
    {
        _exporting = true;
        StateHasChanged();
        
        try
        {
            // TODO: Implement export functionality
            await Task.Delay(1000); // Simulate export
            await OnShowMessage.InvokeAsync("Export configuration functionality coming soon|info");
        }
        finally
        {
            _exporting = false;
            StateHasChanged();
        }
    }

    private async Task ImportConfiguration()
    {
        _importing = true;
        StateHasChanged();
        
        try
        {
            // TODO: Implement import functionality
            await Task.Delay(1000); // Simulate import
            await OnShowMessage.InvokeAsync("Import configuration functionality coming soon|info");
        }
        finally
        {
            _importing = false;
            StateHasChanged();
        }
    }

    private async Task ShowRestartModal()
    {
        if (_restartModal != null)
        {
            await _restartModal.Show();
        }
    }

    private async Task CloseRestartModal()
    {
        if (_restartModal != null)
        {
            await _restartModal.Hide();
        }
    }

    private async Task ConfirmRestart()
    {
        _restarting = true;
        StateHasChanged();
        
        try
        {
            // TODO: Implement system restart functionality
            await Task.Delay(2000); // Simulate restart preparation
            await OnShowMessage.InvokeAsync("System restart functionality coming soon|info");
        }
        finally
        {
            _restarting = false;
            await CloseRestartModal();
        }
    }

    private string GetSystemUptime()
    {
        var uptime = DateTime.UtcNow - _startTime;
        return $"{uptime.Days}d {uptime.Hours}h {uptime.Minutes}m";
    }
}