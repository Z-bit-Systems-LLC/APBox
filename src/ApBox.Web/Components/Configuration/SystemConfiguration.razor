@using ApBox.Core.Services
@using ApBox.Plugins
@inject IReaderConfigurationService ReaderConfigurationService
@inject IPluginLoader PluginLoader

<div class="tab-pane fade show active">
    <div class="row mb-4">
        <div class="col-12">
            <h3>System Information</h3>
            <p class="text-muted">System status, diagnostics, and configuration management</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h6 class="card-title mb-0">System Status</h6>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-3">Application</dt>
                        <dd class="col-sm-9">ApBox Gateway v1.0.0</dd>

                        <dt class="col-sm-3">Framework</dt>
                        <dd class="col-sm-9">.NET 8</dd>

                        <dt class="col-sm-3">Active Readers</dt>
                        <dd class="col-sm-9">@readerCount</dd>

                        <dt class="col-sm-3">Loaded Plugins</dt>
                        <dd class="col-sm-9">@pluginCount</dd>

                        <dt class="col-sm-3">Plugin Directory</dt>
                        <dd class="col-sm-9">
                            <code>plugins/</code>
                        </dd>

                        <dt class="col-sm-3">System Status</dt>
                        <dd class="col-sm-9">
                            <span class="badge bg-success">
                                <span class="oi oi-circle-check me-1"></span>Online
                            </span>
                        </dd>

                        <dt class="col-sm-3">Uptime</dt>
                        <dd class="col-sm-9">@GetSystemUptime()</dd>

                        <dt class="col-sm-3">Database</dt>
                        <dd class="col-sm-9">
                            <span class="badge bg-success">
                                <span class="oi oi-data-transfer-download me-1"></span>Connected
                            </span>
                        </dd>
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h6 class="card-title mb-0">Actions</h6>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary" @onclick="RefreshSystemInfo" disabled="@refreshing">
                            @if (refreshing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            else
                            {
                                <span class="oi oi-reload me-2"></span>
                            }
                            Refresh System Info
                        </button>
                        <button class="btn btn-outline-info" @onclick="ExportConfiguration" disabled="@exporting">
                            @if (exporting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            else
                            {
                                <span class="oi oi-data-transfer-download me-2"></span>
                            }
                            Export Config
                        </button>
                        <button class="btn btn-outline-warning" @onclick="ImportConfiguration" disabled="@importing">
                            @if (importing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            else
                            {
                                <span class="oi oi-data-transfer-upload me-2"></span>
                            }
                            Import Config
                        </button>
                        <button class="btn btn-outline-danger" @onclick="ShowRestartModal">
                            <span class="oi oi-power-standby me-2"></span>Restart System
                        </button>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h6 class="card-title mb-0">Quick Stats</h6>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="border-end">
                                <h4 class="text-primary mb-1">@readerCount</h4>
                                <small class="text-muted">Readers</small>
                            </div>
                        </div>
                        <div class="col-6">
                            <h4 class="text-success mb-1">@pluginCount</h4>
                            <small class="text-muted">Plugins</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6 class="card-title mb-0">System Logs</h6>
                </div>
                <div class="card-body">
                    <div class="alert alert-info">
                        <span class="oi oi-info me-2"></span>
                        System logging viewer will be implemented here. This will show recent application logs, errors, and diagnostic information.
                    </div>
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-outline-primary btn-sm">
                            <span class="oi oi-eye me-1"></span>View Logs
                        </button>
                        <button class="btn btn-outline-secondary btn-sm">
                            <span class="oi oi-data-transfer-download me-1"></span>Download Logs
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Restart Confirmation Modal -->
<div class="modal fade @(showRestartModal ? "show d-block" : "")" tabindex="-1" style="@(showRestartModal ? "background: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Restart System</h5>
                <button type="button" class="btn-close" @onclick="CloseRestartModal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <span class="oi oi-warning me-2"></span>
                    <strong>Warning:</strong> This will restart the ApBox application and temporarily interrupt service.
                </div>
                <p>Are you sure you want to restart the system?</p>
                <ul class="text-muted">
                    <li>All active connections will be closed</li>
                    <li>Plugin states will be reset</li>
                    <li>The restart should complete within 30 seconds</li>
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseRestartModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmRestart" disabled="@restarting">
                    @if (restarting)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Restart System
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    private int readerCount = 0;
    private int pluginCount = 0;
    private bool refreshing = false;
    private bool exporting = false;
    private bool importing = false;
    private bool showRestartModal = false;
    private bool restarting = false;
    private DateTime startTime = DateTime.UtcNow;

    protected override async Task OnInitializedAsync()
    {
        await LoadSystemInfo();
    }

    private async Task LoadSystemInfo()
    {
        try
        {
            var readers = await ReaderConfigurationService.GetAllReadersAsync();
            readerCount = readers.Count();
            
            var plugins = await PluginLoader.LoadPluginsAsync();
            pluginCount = plugins.Count();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error loading system info: {ex.Message}|danger");
        }
    }

    private async Task RefreshSystemInfo()
    {
        refreshing = true;
        StateHasChanged();
        
        try
        {
            await LoadSystemInfo();
            await OnShowMessage.InvokeAsync("System information refreshed|success");
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error refreshing system info: {ex.Message}|danger");
        }
        finally
        {
            refreshing = false;
            StateHasChanged();
        }
    }

    private async Task ExportConfiguration()
    {
        exporting = true;
        StateHasChanged();
        
        try
        {
            // TODO: Implement export functionality
            await Task.Delay(1000); // Simulate export
            await OnShowMessage.InvokeAsync("Export configuration functionality coming soon|info");
        }
        finally
        {
            exporting = false;
            StateHasChanged();
        }
    }

    private async Task ImportConfiguration()
    {
        importing = true;
        StateHasChanged();
        
        try
        {
            // TODO: Implement import functionality
            await Task.Delay(1000); // Simulate import
            await OnShowMessage.InvokeAsync("Import configuration functionality coming soon|info");
        }
        finally
        {
            importing = false;
            StateHasChanged();
        }
    }

    private void ShowRestartModal()
    {
        showRestartModal = true;
        StateHasChanged();
    }

    private void CloseRestartModal()
    {
        showRestartModal = false;
        StateHasChanged();
    }

    private async Task ConfirmRestart()
    {
        restarting = true;
        StateHasChanged();
        
        try
        {
            // TODO: Implement system restart functionality
            await Task.Delay(2000); // Simulate restart preparation
            await OnShowMessage.InvokeAsync("System restart functionality coming soon|info");
        }
        finally
        {
            restarting = false;
            CloseRestartModal();
        }
    }

    private string GetSystemUptime()
    {
        var uptime = DateTime.UtcNow - startTime;
        return $"{uptime.Days}d {uptime.Hours}h {uptime.Minutes}m";
    }
}