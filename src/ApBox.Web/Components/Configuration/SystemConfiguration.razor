@using ApBox.Core.Services
@using ApBox.Core.Models
@using ApBox.Plugins
@using Microsoft.Extensions.Logging

@inject IJSRuntime JSRuntime
@inject IReaderConfigurationService ReaderConfigurationService
@inject IPluginLoader PluginLoader
@inject IConfigurationExportService ConfigurationExportService
@inject ISystemRestartService SystemRestartService
@inject ILogService LogService
@inject IConfiguration Configuration

<Container Fluid>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is3" ElementId="system-title">System Information</Heading>
            <Paragraph TextColor="TextColor.Muted">System status, diagnostics, and configuration management</Paragraph>
        </Column>
    </Row>

    <Row>
        <!-- System Status Card -->
        <Column ColumnSize="ColumnSize.Is8.OnTablet">
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.Info" Margin="Margin.Is2.FromEnd" />
                        System Status
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Application</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>ApBox Gateway v@_systemInfo.ApBoxVersion</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Framework</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@_systemInfo.Framework</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Platform</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@_systemInfo.Platform</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Machine Name</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@_systemInfo.MachineName</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Processor Count</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@_systemInfo.ProcessorCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Active Readers</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="reader-count">@_readerCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Loaded Plugins</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="plugin-count">@_pluginCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Plugin Directory</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Code>@_pluginDirectory</Code>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">System Status</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Badge Color="Color.Success" ElementId="system-status">
                                <Icon Name="IconName.Check" Margin="Margin.Is1.FromEnd" />
                                Online
                            </Badge>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Uptime</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="system-uptime">@GetSystemUptime()</Text>
                        </Column>
                    </Row>

                    <Row>
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Database</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Badge Color="Color.Success" ElementId="database-status">
                                <Icon Name="IconName.Server" Margin="Margin.Is1.FromEnd" />
                                Connected
                            </Badge>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>

        <!-- Actions and Quick Stats Column -->
        <Column ColumnSize="ColumnSize.Is4.OnTablet">
            <!-- Actions Card -->
            <Card Margin="Margin.Is3.FromBottom">
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.Settings" Margin="Margin.Is2.FromEnd" />
                        Actions
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Div Display="Display.Flex" Flex="Flex.Column" Gap="Gap.Is2">
                        <Button Color="Color.Primary" Outline="true" @onclick="RefreshSystemInfo" Loading="_refreshing" ElementId="refresh-system-btn">
                            <Icon Name="IconName.Sync" Margin="Margin.Is2.FromEnd" />
                            Refresh System Info
                        </Button>
                        
                        <Button Color="Color.Info" Outline="true" @onclick="ExportConfiguration" Loading="_exporting" ElementId="export-config-btn">
                            <Icon Name="IconName.Download" Margin="Margin.Is2.FromEnd" />
                            Export Config
                        </Button>
                        
                        <Button Color="Color.Warning" Outline="true" @onclick="ShowImportModal" Loading="_importing" ElementId="import-config-btn">
                            <Icon Name="IconName.FileUpload" Margin="Margin.Is2.FromEnd" />
                            Import Config
                        </Button>
                        
                        <Button Color="Color.Danger" Outline="true" @onclick="ShowRestartModal" ElementId="restart-system-btn">
                            <Icon Name="IconName.Stop" Margin="Margin.Is2.FromEnd" />
                            Restart System
                        </Button>
                    </Div>
                </CardBody>
            </Card>

            <!-- Quick Stats Card -->
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.ChartBar" Margin="Margin.Is2.FromEnd" />
                        Quick Stats
                    </CardTitle>
                </CardHeader>
                <CardBody TextAlignment="TextAlignment.Center">
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6" Border="Border.OnEnd">
                            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Primary" Margin="Margin.Is1.FromBottom">@_readerCount</Heading>
                            <Small TextColor="TextColor.Muted">Readers</Small>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6">
                            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success" Margin="Margin.Is1.FromBottom">@_pluginCount</Heading>
                            <Small TextColor="TextColor.Muted">Plugins</Small>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <!-- System Logs Section -->
    <Row Margin="Margin.Is4.FromTop">
        <Column>
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.List" Margin="Margin.Is2.FromEnd" />
                        System Logs
                        @if (_refreshingLogs)
                        {
                            <Icon Name="IconName.Sync" Class="fa-spin" Margin="Margin.Is2.FromStart" />
                        }
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <!-- Log Filter Controls -->
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Select TValue="LogLevel" @bind-SelectedValue="_selectedLogLevel" @bind-SelectedValue:after="FilterLogs">
                                <SelectItem TValue="LogLevel" Value="LogLevel.Trace">All Levels</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Debug">Debug+</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Information">Info+</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Warning">Warning+</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Error">Error+</SelectItem>
                            </Select>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is4">
                            <TextEdit @bind-Text="_searchTerm" @bind-Text:after="FilterLogs" Placeholder="Search logs..." />
                        </Column>
                        <Column ColumnSize="ColumnSize.Is2">
                            <Button Color="Color.Info" Outline="true" Size="Size.Small" @onclick="ManualRefreshLogs" Loading="_refreshingLogs" ElementId="refresh-logs-btn">
                                <Icon Name="IconName.Sync" Margin="Margin.Is1.FromEnd" />
                                Refresh
                            </Button>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is2">
                            <Button Color="Color.Secondary" Outline="true" Size="Size.Small" @onclick="ExportLogs" Loading="_exportingLogs" ElementId="download-logs-btn">
                                <Icon Name="IconName.Download" Margin="Margin.Is1.FromEnd" />
                                Export
                            </Button>
                        </Column>
                    </Row>

                    <!-- Pagination Controls -->
                    @if (_totalLogCount > _pageSize)
                    {
                        <Row Margin="Margin.Is2.FromBottom">
                            <Column>
                                <Div Display="Display.Flex" JustifyContent="JustifyContent.Between" AlignItems="AlignItems.Center">
                                    <Small TextColor="TextColor.Muted">
                                        Showing @((_currentPage - 1) * _pageSize + 1) to @(Math.Min(_currentPage * _pageSize, _totalLogCount)) of @_totalLogCount logs
                                    </Small>
                                    <Div>
                                        <Button Color="Color.Secondary" Outline="true" Size="Size.Small" 
                                                @onclick="PreviousPage" 
                                                Disabled="@(_currentPage <= 1)"
                                                Margin="Margin.Is1.FromEnd">
                                            <Icon Name="IconName.ChevronLeft" />
                                        </Button>
                                        <Button Color="Color.Secondary" Outline="true" Size="Size.Small" 
                                                @onclick="NextPage" 
                                                Disabled="@(_currentPage >= Math.Ceiling((double)_totalLogCount / _pageSize))">
                                            <Icon Name="IconName.ChevronRight" />
                                        </Button>
                                    </Div>
                                </Div>
                            </Column>
                        </Row>
                    }

                    <!-- Log Entries -->
                    <Div Overflow="Overflow.Auto" Border="Border.Rounded" Height="Height.Max100.Is25">
                        @if (_filteredLogs?.Any() == true)
                        {
                            @foreach (var log in _filteredLogs)
                            {
                                <Div Padding="Padding.Is1.FromBottom" Margin="Margin.Is2.FromBottom" Border="Border.OnBottom">
                                    <Div Display="Display.Flex" JustifyContent="JustifyContent.Between" Margin="Margin.Is1.FromBottom">
                                        <Small TextColor="TextColor.Muted">@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</Small>
                                        <Badge Color="@GetLogLevelColor(log.Level)" Pill="true" Margin="Margin.Is1.FromStart">@log.LevelDisplay</Badge>
                                    </Div>
                                    <Text TextColor="@GetLogLevelTextColor(log.Level)" TextWeight="TextWeight.Normal">[@log.Source] @log.Message</Text>
                                    @if (!string.IsNullOrEmpty(log.Exception))
                                    {
                                        <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" Background="Background.Light" Border="Border.Rounded">
                                            <Small TextColor="TextColor.Danger" TextStyle="TextStyle.Monospace">@log.Exception</Small>
                                        </Div>
                                    }
                                </Div>
                            }
                        }
                        else
                        {
                            <Paragraph TextColor="TextColor.Muted" TextAlignment="TextAlignment.Center">No logs available</Paragraph>
                        }
                    </Div>
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

<!-- Restart Confirmation Modal -->
<Modal @ref="_restartModal" ElementId="restart-confirmation-modal">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Restart System</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Warning" Visible="true">
                <AlertMessage>
                    <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
                    <strong>Warning:</strong> This will restart the ApBox application and temporarily interrupt service.
                </AlertMessage>
            </Alert>
            <Paragraph>Are you sure you want to restart the system?</Paragraph>
            <UnorderedList TextColor="TextColor.Muted">
                <UnorderedListItem>All active connections will be closed</UnorderedListItem>
                <UnorderedListItem>Plugin states will be reset</UnorderedListItem>
                <UnorderedListItem>The restart should complete within 30 seconds</UnorderedListItem>
            </UnorderedList>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="CloseRestartModal" ElementId="restart-cancel-btn">
                Cancel
            </Button>
            <Button Color="Color.Danger" @onclick="ConfirmRestart" Loading="_restarting" ElementId="restart-confirm-btn">
                <Icon Name="IconName.Stop" Margin="Margin.Is2.FromEnd" />
                Restart System
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Import Configuration Modal -->
<Modal @ref="_importModal" ElementId="import-configuration-modal">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Import Configuration</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (_selectedFile == null)
            {
                <Alert Color="Color.Info" Visible="true">
                    <AlertMessage>
                        <Icon Name="IconName.Info" Margin="Margin.Is2.FromEnd" />
                        Select a JSON configuration file to import system settings, readers, and feedback configuration.
                    </AlertMessage>
                </Alert>
                
                <FilePicker @ref="_filePicker" 
                           Filter=".json"
                           Changed="OnFileSelected"
                           ShowMode="FilePickerShowMode.List"
                           ElementId="import-config-picker">
                    <FileTemplate>
                        <div class="d-flex align-items-center justify-content-center p-4 border border-dashed rounded">
                            <div class="text-center">
                                <Icon Name="IconName.FileUpload" Size="IconSize.x2" TextColor="TextColor.Muted" Margin="Margin.Is2.FromBottom" />
                                <div>
                                    <Text TextWeight="TextWeight.Bold" Margin="Margin.Is1.FromBottom">Click to select a configuration file</Text>
                                    <Small TextColor="TextColor.Muted">or drag and drop a JSON file here</Small>
                                </div>
                            </div>
                        </div>
                    </FileTemplate>
                </FilePicker>
                
                <Paragraph TextColor="TextColor.Muted" TextSize="TextSize.Small" Margin="Margin.Is2.FromTop">
                    <strong>Supported format:</strong> JSON files exported from ApBox<br />
                    <strong>Maximum file size:</strong> 1MB
                </Paragraph>
            }
            else
            {
                <Alert Color="Color.Warning" Visible="true">
                    <AlertMessage>
                        <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
                        <strong>Warning:</strong> Importing configuration will replace current system settings.
                    </AlertMessage>
                </Alert>
                
                <Card>
                    <CardBody>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                <Text Weight="TextWeight.Bold">Selected File:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Text>@_selectedFile.Name</Text>
                            </Column>
                        </Row>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                <Text Weight="TextWeight.Bold">File Size:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Text>@FormatFileSize(_selectedFile.Size)</Text>
                            </Column>
                        </Row>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                <Text Weight="TextWeight.Bold">File Type:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Text>@_selectedFile.Type</Text>
                            </Column>
                        </Row>
                    </CardBody>
                </Card>
                
                <UnorderedList TextColor="TextColor.Muted" Margin="Margin.Is3.FromTop">
                    <UnorderedListItem>Current reader configurations will be replaced</UnorderedListItem>
                    <UnorderedListItem>Feedback settings will be updated</UnorderedListItem>
                    <UnorderedListItem>System settings will be applied</UnorderedListItem>
                    <UnorderedListItem>This action cannot be undone</UnorderedListItem>
                </UnorderedList>
            }
        </ModalBody>
        <ModalFooter>
            @if (_selectedFile == null)
            {
                <Button Color="Color.Secondary" @onclick="CloseImportModal" ElementId="import-cancel-btn">
                    Cancel
                </Button>
            }
            else
            {
                <Button Color="Color.Secondary" @onclick="ClearSelectedFile" ElementId="import-back-btn">
                    <Icon Name="IconName.ArrowLeft" Margin="Margin.Is2.FromEnd" />
                    Back
                </Button>
                <Button Color="Color.Warning" @onclick="ConfirmImport" Loading="_importing" ElementId="import-confirm-btn">
                    <Icon Name="IconName.FileUpload" Margin="Margin.Is2.FromEnd" />
                    Import Configuration
                </Button>
            }
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    public void Dispose()
    {
        _uptimeTimer?.Dispose();
        _logRefreshTimer?.Dispose();
    }
    
    private int _readerCount;
    private int _pluginCount;
    private SystemInfo _systemInfo = new();
    private string _pluginDirectory = "plugins/";
    private bool _refreshing;
    private bool _exporting;
    private bool _importing;
    private bool _restarting;
    private bool _exportingLogs;
    private bool _refreshingLogs;
    private Timer? _uptimeTimer;
    private Timer? _logRefreshTimer;
    
    // Modal references
    private Modal? _restartModal;
    private Modal? _importModal;
    private FilePicker? _filePicker;
    private IFileEntry? _selectedFile;
    
    // Log viewer state
    private IEnumerable<LogEntry>? _recentLogs;
    private IEnumerable<LogEntry>? _filteredLogs;
    private LogLevel _selectedLogLevel = LogLevel.Information;
    private string _searchTerm = string.Empty;
    private int _currentPage = 1;
    private int _pageSize = 50;
    private int _totalLogCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadSystemInfo();
        await LoadRecentLogs();
        
        // Start uptime timer to update every 5 seconds
        _uptimeTimer = new Timer(async void (_) => await InvokeAsync(StateHasChanged), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
        
        // Start log refresh timer to update every 2 seconds
        _logRefreshTimer = new Timer(async void (_) => await InvokeAsync(LoadRecentLogs), null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }

    private async Task LoadSystemInfo()
    {
        try
        {
            var readers = await ReaderConfigurationService.GetAllReadersAsync();
            _readerCount = readers.Count();
            
            var plugins = await PluginLoader.LoadPluginsAsync();
            _pluginCount = plugins.Count();
            
            // Get plugin directory from configuration
            _pluginDirectory = Configuration.GetValue<string>("PluginSettings:Directory") ?? "plugins/";
            
            // Initialize system info with current values
            _systemInfo = new SystemInfo();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error loading system info: {ex.Message}|danger");
        }
    }

    private async Task RefreshSystemInfo()
    {
        _refreshing = true;
        StateHasChanged();
        
        try
        {
            await LoadSystemInfo();
            await OnShowMessage.InvokeAsync("System information refreshed|success");
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error refreshing system info: {ex.Message}|danger");
        }
        finally
        {
            _refreshing = false;
            StateHasChanged();
        }
    }

    private async Task ExportConfiguration()
    {
        _exporting = true;
        StateHasChanged();
        
        try
        {
            var exportData = await ConfigurationExportService.ExportConfigurationAsync();
            var json = System.Text.Json.JsonSerializer.Serialize(exportData, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
            });
            
            var fileName = $"apbox-config-{DateTime.UtcNow:yyyyMMdd-HHmmss}.json";
            var bytes = System.Text.Encoding.UTF8.GetBytes(json);
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/json", bytes);
            await OnShowMessage.InvokeAsync("Configuration exported successfully|success");
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error exporting configuration: {ex.Message}|danger");
        }
        finally
        {
            _exporting = false;
            StateHasChanged();
        }
    }


    private async Task ShowRestartModal()
    {
        if (_restartModal != null)
        {
            await _restartModal.Show();
        }
    }

    private async Task CloseRestartModal()
    {
        if (_restartModal != null)
        {
            await _restartModal.Hide();
        }
    }

    private async Task ShowImportModal()
    {
        if (_importModal != null)
        {
            await _importModal.Show();
        }
    }

    private async Task CloseImportModal()
    {
        if (_importModal != null)
        {
            await _importModal.Hide();
        }
        _selectedFile = null;
        if (_filePicker != null)
        {
            await _filePicker.Clear();
        }
    }

    private async Task ClearSelectedFile()
    {
        _selectedFile = null;
        if (_filePicker != null)
        {
            await _filePicker.Clear();
        }
        StateHasChanged();
    }

    private async Task ConfirmImport()
    {
        if (_selectedFile == null)
            return;

        _importing = true;
        StateHasChanged();
        
        try
        {
            await using var stream = _selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024); // 1MB limit
            using var reader = new StreamReader(stream);
            await reader.ReadToEndAsync();
            
            // Here you would call your configuration import service
            // For now, we'll show a success message
            await OnShowMessage.InvokeAsync($"Configuration file '{_selectedFile.Name}' imported successfully. Import functionality will be implemented.|info");
            
            // Reset and close modal
            await CloseImportModal();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error importing configuration: {ex.Message}|danger");
        }
        finally
        {
            _importing = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmRestart()
    {
        _restarting = true;
        StateHasChanged();
        
        try
        {
            var canRestart = await SystemRestartService.CanRestartAsync();
            if (!canRestart)
            {
                await OnShowMessage.InvokeAsync("System cannot be restarted at this time|warning");
                return;
            }
            
            await OnShowMessage.InvokeAsync("Preparing system for restart...|info");
            await SystemRestartService.PrepareRestartAsync();
            
            await OnShowMessage.InvokeAsync("Restarting system...|warning");
            await SystemRestartService.RestartApplicationAsync();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error restarting system: {ex.Message}|danger");
        }
        finally
        {
            _restarting = false;
            await CloseRestartModal();
        }
    }

    private string GetSystemUptime()
    {
        try
        {
            var process = System.Diagnostics.Process.GetCurrentProcess();
            var uptime = DateTime.UtcNow - process.StartTime.ToUniversalTime();
            
            if (uptime.Days > 0)
                return $"{uptime.Days}d {uptime.Hours}h {uptime.Minutes}m";
            else if (uptime.Hours > 0)
                return $"{uptime.Hours}h {uptime.Minutes}m";
            else
                return $"{uptime.Minutes}m {uptime.Seconds}s";
        }
        catch
        {
            return "Unknown";
        }
    }
    
    private async Task LoadRecentLogs()
    {
        try
        {
            _recentLogs = await LogService.GetRecentLogsAsync();
            await FilterLogs();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error loading logs: {ex.Message}|danger");
        }
    }
    
    private async Task ManualRefreshLogs()
    {
        _refreshingLogs = true;
        StateHasChanged();
        
        try
        {
            await LoadRecentLogs();
        }
        finally
        {
            _refreshingLogs = false;
            StateHasChanged();
        }
    }
    
    private Task FilterLogs()
    {
        if (_recentLogs == null)
        {
            _filteredLogs = Enumerable.Empty<LogEntry>();
            _totalLogCount = 0;
            StateHasChanged();
            return Task.CompletedTask;
        }
        
        var filtered = _recentLogs.Where(l => l.Level >= _selectedLogLevel);
        
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filtered = filtered.Where(l => 
                l.Message.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                l.Source.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (l.Exception?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }
        
        var orderedFiltered = filtered.OrderByDescending(l => l.Timestamp);
        _totalLogCount = orderedFiltered.Count();
        
        // Apply pagination
        _filteredLogs = orderedFiltered
            .Skip((_currentPage - 1) * _pageSize)
            .Take(_pageSize);
        
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private async Task ExportLogs()
    {
        _exportingLogs = true;
        StateHasChanged();
        
        try
        {
            var logData = await LogService.ExportLogsAsync();
            var fileName = $"apbox-logs-{DateTime.UtcNow:yyyyMMdd-HHmmss}.json";
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/json", logData);
            await OnShowMessage.InvokeAsync("Logs exported successfully|success");
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error exporting logs: {ex.Message}|danger");
        }
        finally
        {
            _exportingLogs = false;
            StateHasChanged();
        }
    }
    
    private Color GetLogLevelColor(LogLevel level) => level switch
    {
        LogLevel.Trace => Color.Light,
        LogLevel.Debug => Color.Secondary,
        LogLevel.Information => Color.Info,
        LogLevel.Warning => Color.Warning,
        LogLevel.Error => Color.Danger,
        LogLevel.Critical => Color.Dark,
        _ => Color.Light
    };
    
    private TextColor GetLogLevelTextColor(LogLevel level) => level switch
    {
        LogLevel.Trace => TextColor.Muted,
        LogLevel.Debug => TextColor.Secondary,
        LogLevel.Information => TextColor.Info,
        LogLevel.Warning => TextColor.Warning,
        LogLevel.Error => TextColor.Danger,
        LogLevel.Critical => TextColor.Dark,
        _ => TextColor.Body
    };
    
    private async Task OnFileSelected(FileChangedEventArgs e)
    {
        if (e.Files.Length == 0)
            return;

        var file = e.Files[0];
        
        if (file.Type != "application/json" && !file.Name.EndsWith(".json"))
        {
            await OnShowMessage.InvokeAsync("Please select a JSON file|warning");
            return;
        }

        _selectedFile = file;
        StateHasChanged();
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024)
            return $"{bytes} B";
        else if (bytes < 1024 * 1024)
            return $"{bytes / 1024.0:F1} KB";
        else if (bytes < 1024 * 1024 * 1024)
            return $"{bytes / (1024.0 * 1024.0):F1} MB";
        else
            return $"{bytes / (1024.0 * 1024.0 * 1024.0):F1} GB";
    }
    
    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            FilterLogs();
        }
    }
    
    private void NextPage()
    {
        var maxPage = (int)Math.Ceiling((double)_totalLogCount / _pageSize);
        if (_currentPage < maxPage)
        {
            _currentPage++;
            FilterLogs();
        }
    }
}