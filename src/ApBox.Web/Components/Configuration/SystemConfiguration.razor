@using ApBox.Core.Services
@using ApBox.Core.Models
@using ApBox.Plugins
@using ApBox.Web.ViewModels
@using Microsoft.Extensions.Logging

@inject SystemConfigurationViewModel ViewModel
@implements IAsyncDisposable

<Container Fluid>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is3" ElementId="system-title">System Information</Heading>
            <Paragraph TextColor="TextColor.Muted">System status, diagnostics, and configuration management</Paragraph>
        </Column>
    </Row>

    <Row>
        <!-- System Status Card -->
        <Column ColumnSize="ColumnSize.Is8.OnTablet">
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.Info" Margin="Margin.Is2.FromEnd" />
                        System Status
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Application</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>ApBox Gateway v@ViewModel.SystemInfo.ApBoxVersion</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Framework</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@ViewModel.SystemInfo.Framework</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Platform</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@ViewModel.SystemInfo.Platform</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Machine Name</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@ViewModel.SystemInfo.MachineName</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Processor Count</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text>@ViewModel.SystemInfo.ProcessorCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Active Readers</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="reader-count">@ViewModel.ReaderCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Loaded Plugins</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="plugin-count">@ViewModel.PluginCount</Text>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Plugin Directory</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Code>@ViewModel.PluginDirectory</Code>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">System Status</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Badge Color="Color.Success" ElementId="system-status">
                                <Icon Name="IconName.Check" Margin="Margin.Is1.FromEnd" />
                                Online
                            </Badge>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Uptime</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Text ElementId="system-uptime">@ViewModel.GetSystemUptime()</Text>
                        </Column>
                    </Row>

                    <Row>
                        <Column ColumnSize="ColumnSize.Is3.OnTablet">
                            <Text Weight="TextWeight.Bold">Database</Text>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is9.OnTablet">
                            <Badge Color="Color.Success" ElementId="database-status">
                                <Icon Name="IconName.Server" Margin="Margin.Is1.FromEnd" />
                                Connected
                            </Badge>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>

        <!-- Actions and Quick Stats Column -->
        <Column ColumnSize="ColumnSize.Is4.OnTablet">
            <!-- Actions Card -->
            <Card Margin="Margin.Is3.FromBottom">
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.Settings" Margin="Margin.Is2.FromEnd" />
                        Actions
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Div Display="Display.Flex" Flex="Flex.Column" Gap="Gap.Is2">
                        <Button Color="Color.Primary" Outline="true" Clicked="() => ViewModel.RefreshSystemInfoCommand.Execute(null)" Loading="ViewModel.Refreshing" ElementId="refresh-system-btn">
                            <Icon Name="IconName.Sync" Margin="Margin.Is2.FromEnd" />
                            Refresh System Info
                        </Button>
                        
                        <Button Color="Color.Info" Outline="true" Clicked="() => ViewModel.ExportConfigurationCommand.Execute(null)" Loading="ViewModel.Exporting" ElementId="export-config-btn">
                            <Icon Name="IconName.Download" Margin="Margin.Is2.FromEnd" />
                            Export Config
                        </Button>
                        
                        <Button Color="Color.Warning" Outline="true" @onclick="ShowImportModal" Loading="ViewModel.Importing" ElementId="import-config-btn">
                            <Icon Name="IconName.FileUpload" Margin="Margin.Is2.FromEnd" />
                            Import Config
                        </Button>
                        
                        <Button Color="Color.Danger" Outline="true" @onclick="ShowRestartModal" ElementId="restart-system-btn">
                            <Icon Name="IconName.Stop" Margin="Margin.Is2.FromEnd" />
                            Restart System
                        </Button>
                    </Div>
                </CardBody>
            </Card>

            <!-- Quick Stats Card -->
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.ChartBar" Margin="Margin.Is2.FromEnd" />
                        Quick Stats
                    </CardTitle>
                </CardHeader>
                <CardBody TextAlignment="TextAlignment.Center">
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6" Border="Border.OnEnd">
                            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Primary" Margin="Margin.Is1.FromBottom">@ViewModel.ReaderCount</Heading>
                            <Small TextColor="TextColor.Muted">Readers</Small>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6">
                            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success" Margin="Margin.Is1.FromBottom">@ViewModel.PluginCount</Heading>
                            <Small TextColor="TextColor.Muted">Plugins</Small>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <!-- System Logs Section -->
    <Row Margin="Margin.Is4.FromTop">
        <Column>
            <Card>
                <CardHeader>
                    <CardTitle Size="6" Margin="Margin.Is0.FromBottom">
                        <Icon Name="IconName.List" Margin="Margin.Is2.FromEnd" />
                        System Logs
                        @if (ViewModel.RefreshingLogs)
                        {
                            <Icon Name="IconName.Sync" Class="fa-spin" Margin="Margin.Is2.FromStart" />
                        }
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <!-- Log Filter Controls -->
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column ColumnSize="ColumnSize.Is4">
                            <Select TValue="LogLevel" @bind-SelectedValue="ViewModel.SelectedLogLevel" @bind-SelectedValue:after="ViewModel.OnLogLevelChanged">
                                <SelectItem TValue="LogLevel" Value="LogLevel.Trace">All Levels</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Debug">Debug+</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Information">Info+</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Warning">Warning+</SelectItem>
                                <SelectItem TValue="LogLevel" Value="LogLevel.Error">Error+</SelectItem>
                            </Select>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is4">
                            <TextEdit @bind-Text="ViewModel.SearchTerm" @bind-Text:after="ViewModel.OnSearchTermChanged" Placeholder="Search logs..." />
                        </Column>
                        <Column ColumnSize="ColumnSize.Is2">
                            <Button Color="Color.Info" Outline="true" Size="Size.Small" Clicked="() => ViewModel.RefreshLogsCommand.Execute(null)" Loading="ViewModel.RefreshingLogs" ElementId="refresh-logs-btn">
                                <Icon Name="IconName.Sync" Margin="Margin.Is1.FromEnd" />
                                Refresh
                            </Button>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is2">
                            <Button Color="Color.Secondary" Outline="true" Size="Size.Small" Clicked="() => ViewModel.ExportLogsCommand.Execute(null)" Loading="ViewModel.ExportingLogs" ElementId="download-logs-btn">
                                <Icon Name="IconName.Download" Margin="Margin.Is1.FromEnd" />
                                Export
                            </Button>
                        </Column>
                    </Row>

                    <!-- Pagination Controls -->
                    @if (ViewModel.TotalLogCount > ViewModel.PageSize)
                    {
                        <Row Margin="Margin.Is2.FromBottom">
                            <Column>
                                <Div Display="Display.Flex" JustifyContent="JustifyContent.Between" AlignItems="AlignItems.Center">
                                    <Small TextColor="TextColor.Muted">
                                        Showing @((ViewModel.CurrentPage - 1) * ViewModel.PageSize + 1) to @(Math.Min(ViewModel.CurrentPage * ViewModel.PageSize, ViewModel.TotalLogCount)) of @ViewModel.TotalLogCount logs
                                    </Small>
                                    <Div>
                                        <Button Color="Color.Secondary" Outline="true" Size="Size.Small" 
                                                Clicked="() => ViewModel.PreviousPageCommand.Execute(null)" 
                                                Disabled="@(ViewModel.CurrentPage <= 1)"
                                                Margin="Margin.Is1.FromEnd">
                                            <Icon Name="IconName.ChevronLeft" />
                                        </Button>
                                        <Button Color="Color.Secondary" Outline="true" Size="Size.Small" 
                                                Clicked="() => ViewModel.NextPageCommand.Execute(null)" 
                                                Disabled="@(ViewModel.CurrentPage >= Math.Ceiling((double)ViewModel.TotalLogCount / ViewModel.PageSize))">
                                            <Icon Name="IconName.ChevronRight" />
                                        </Button>
                                    </Div>
                                </Div>
                            </Column>
                        </Row>
                    }

                    <!-- Log Entries -->
                    <Div Overflow="Overflow.Auto" Border="Border.Rounded" Height="Height.Max100.Is25">
                        @if (ViewModel.FilteredLogs?.Any() == true)
                        {
                            @foreach (var log in ViewModel.FilteredLogs)
                            {
                                <Div Padding="Padding.Is1.FromBottom" Margin="Margin.Is2.FromBottom" Border="Border.OnBottom">
                                    <Div Display="Display.Flex" JustifyContent="JustifyContent.Between" Margin="Margin.Is1.FromBottom">
                                        <Small TextColor="TextColor.Muted">@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</Small>
                                        <Badge Color="@ViewModel.GetLogLevelColor(log.Level)" Pill="true" Margin="Margin.Is1.FromStart">@log.LevelDisplay</Badge>
                                    </Div>
                                    <Text TextColor="@ViewModel.GetLogLevelTextColor(log.Level)" TextWeight="TextWeight.Normal">[@log.Source] @log.Message</Text>
                                    @if (!string.IsNullOrEmpty(log.Exception))
                                    {
                                        <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" Background="Background.Light" Border="Border.Rounded">
                                            <Small TextColor="TextColor.Danger" TextStyle="TextStyle.Monospace">@log.Exception</Small>
                                        </Div>
                                    }
                                </Div>
                            }
                        }
                        else
                        {
                            <Paragraph TextColor="TextColor.Muted" TextAlignment="TextAlignment.Center">No logs available</Paragraph>
                        }
                    </Div>
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

<!-- Restart Confirmation Modal -->
<Modal @ref="_restartModal" ElementId="restart-confirmation-modal">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Restart System</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Warning" Visible="true">
                <AlertMessage>
                    <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
                    <strong>Warning:</strong> This will restart the ApBox application and temporarily interrupt service.
                </AlertMessage>
            </Alert>
            <Paragraph>Are you sure you want to restart the system?</Paragraph>
            <UnorderedList TextColor="TextColor.Muted">
                <UnorderedListItem>All active connections will be closed</UnorderedListItem>
                <UnorderedListItem>Plugin states will be reset</UnorderedListItem>
                <UnorderedListItem>The restart should complete within 30 seconds</UnorderedListItem>
            </UnorderedList>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="CloseRestartModal" ElementId="restart-cancel-btn">
                Cancel
            </Button>
            <Button Color="Color.Danger" Clicked="() => ViewModel.ConfirmRestartCommand.Execute(null)" Loading="ViewModel.Restarting" ElementId="restart-confirm-btn">
                <Icon Name="IconName.Stop" Margin="Margin.Is2.FromEnd" />
                Restart System
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Import Configuration Modal -->
<Modal @ref="_importModal" ElementId="import-configuration-modal">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Import Configuration</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (ViewModel.SelectedFile == null)
            {
                <Alert Color="Color.Info" Visible="true">
                    <AlertMessage>
                        <Icon Name="IconName.Info" Margin="Margin.Is2.FromEnd" />
                        Select a JSON configuration file to import system settings, readers, and feedback configuration.
                    </AlertMessage>
                </Alert>
                
                <FilePicker @ref="_filePicker" 
                           Filter=".json"
                           Changed="OnFileSelected"
                           ShowMode="FilePickerShowMode.List"
                           ElementId="import-config-picker">
                    <FileTemplate>
                        <div class="d-flex align-items-center justify-content-center p-4 border border-dashed rounded">
                            <div class="text-center">
                                <Icon Name="IconName.FileUpload" Size="IconSize.x2" TextColor="TextColor.Muted" Margin="Margin.Is2.FromBottom" />
                                <div>
                                    <Text TextWeight="TextWeight.Bold" Margin="Margin.Is1.FromBottom">Click to select a configuration file</Text>
                                    <Small TextColor="TextColor.Muted">or drag and drop a JSON file here</Small>
                                </div>
                            </div>
                        </div>
                    </FileTemplate>
                </FilePicker>
                
                <Paragraph TextColor="TextColor.Muted" TextSize="TextSize.Small" Margin="Margin.Is2.FromTop">
                    <strong>Supported format:</strong> JSON files exported from ApBox<br />
                    <strong>Maximum file size:</strong> 1MB
                </Paragraph>
            }
            else
            {
                <Alert Color="Color.Warning" Visible="true">
                    <AlertMessage>
                        <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
                        <strong>Warning:</strong> Importing configuration will replace current system settings.
                    </AlertMessage>
                </Alert>
                
                <Card>
                    <CardBody>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                <Text Weight="TextWeight.Bold">Selected File:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Text>@ViewModel.SelectedFile.Name</Text>
                            </Column>
                        </Row>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                <Text Weight="TextWeight.Bold">File Size:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Text>@ViewModel.FormatFileSize(ViewModel.SelectedFile.Size)</Text>
                            </Column>
                        </Row>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                <Text Weight="TextWeight.Bold">File Type:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Text>@ViewModel.SelectedFile.Type</Text>
                            </Column>
                        </Row>
                    </CardBody>
                </Card>
                
                <UnorderedList TextColor="TextColor.Muted" Margin="Margin.Is3.FromTop">
                    <UnorderedListItem>Current reader configurations will be replaced</UnorderedListItem>
                    <UnorderedListItem>Feedback settings will be updated</UnorderedListItem>
                    <UnorderedListItem>System settings will be applied</UnorderedListItem>
                    <UnorderedListItem>This action cannot be undone</UnorderedListItem>
                </UnorderedList>
            }
        </ModalBody>
        <ModalFooter>
            @if (ViewModel.SelectedFile == null)
            {
                <Button Color="Color.Secondary" @onclick="CloseImportModal" ElementId="import-cancel-btn">
                    Cancel
                </Button>
            }
            else
            {
                <Button Color="Color.Secondary" @onclick="ClearSelectedFile" ElementId="import-back-btn">
                    <Icon Name="IconName.ArrowLeft" Margin="Margin.Is2.FromEnd" />
                    Back
                </Button>
                <Button Color="Color.Warning" Clicked="() => ViewModel.ConfirmImportCommand.Execute(null)" Loading="ViewModel.Importing" ElementId="import-confirm-btn">
                    <Icon Name="IconName.FileUpload" Margin="Margin.Is2.FromEnd" />
                    Import Configuration
                </Button>
            }
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    // Modal references
    private Modal? _restartModal;
    private Modal? _importModal;
    private FilePicker? _filePicker;

    protected override async Task OnInitializedAsync()
    {
        // Set up component callbacks for the ViewModel
        ViewModel.StateHasChanged = StateHasChanged;
        ViewModel.InvokeAsync = InvokeAsync;
        ViewModel.OnShowMessage = async (message) => await OnShowMessage.InvokeAsync(message);
        
        // Initialize the ViewModel
        await ViewModel.InitializeAsync();
    }

    private async Task ShowRestartModal()
    {
        if (_restartModal != null)
        {
            await _restartModal.Show();
        }
    }

    private async Task CloseRestartModal()
    {
        if (_restartModal != null)
        {
            await _restartModal.Hide();
        }
    }

    private async Task ShowImportModal()
    {
        if (_importModal != null)
        {
            await _importModal.Show();
        }
    }

    private async Task CloseImportModal()
    {
        if (_importModal != null)
        {
            await _importModal.Hide();
        }
        ViewModel.SelectedFile = null;
        if (_filePicker != null)
        {
            await _filePicker.Clear();
        }
    }

    private async Task ClearSelectedFile()
    {
        ViewModel.ClearSelectedFile();
        if (_filePicker != null)
        {
            await _filePicker.Clear();
        }
        StateHasChanged();
    }

    private async Task OnFileSelected(FileChangedEventArgs e)
    {
        if (e.Files.Length == 0)
            return;

        var file = e.Files[0];
        await ViewModel.OnFileSelectedAsync(file);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await ViewModel.DisposeAsync();
    }
}