@using ApBox.Core.Services
@using ApBox.Plugins
@inject IReaderConfigurationService ReaderConfigurationService
@inject IJSRuntime JSRuntime

<Container Fluid>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Row JustifyContent="JustifyContent.Between" AlignItems="AlignItems.Center">
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Heading Size="HeadingSize.Is3" ElementId="readers-title">Reader Configuration</Heading>
                </Column>
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Button Color="Color.Primary" Clicked="ShowAddReaderModal" ElementId="add-reader-button">
                        <Icon Name="IconName.Add" Margin="Margin.Is2.FromEnd" />
                        Add Reader
                    </Button>
                </Column>
            </Row>
        </Column>
    </Row>
    @if (readers.Any())
    {
        <Row>
            @foreach (var reader in readers)
            {
                <Column ColumnSize="ColumnSize.Is6.OnTablet.Is4.OnDesktop" Margin="Margin.Is4.FromBottom">
                    <Card Height="Height.Is100">
                        <CardHeader>
                            <Row JustifyContent="JustifyContent.Between" AlignItems="AlignItems.Center">
                                <Column ColumnSize="ColumnSize.IsAuto">
                                    <CardTitle Margin="Margin.Is0.FromBottom">@reader.ReaderName</CardTitle>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsAuto">
                                    <Buttons Size="Size.Small">
                                        <Button Color="Color.Primary" Outline Clicked="() => EditReader(reader)" ElementId="@($"edit-reader-{reader.ReaderId}")">
                                            <Icon Name="IconName.Edit" />
                                        </Button>
                                        <Button Color="Color.Danger" Outline Clicked="() => DeleteReader(reader)" ElementId="@($"delete-reader-{reader.ReaderId}")">
                                            <Icon Name="IconName.Delete" />
                                        </Button>
                                    </Buttons>
                                </Column>
                            </Row>
                        </CardHeader>
                        <CardBody>
                            <Paragraph TextColor="TextColor.Muted" Margin="Margin.Is2.FromBottom">
                                <Small>Reader ID: @reader.ReaderId.ToString()[..8]...</Small>
                            </Paragraph>
                            <Badge Color="Color.Info" Margin="Margin.Is2.FromBottom">
                                @reader.ReaderId.ToString()[..8]...
                            </Badge>
                        </CardBody>
                    </Card>
                </Column>
            }
        </Row>
    }
    else
    {
        <Row JustifyContent="JustifyContent.Center" TextAlignment="TextAlignment.Center" Padding="Padding.Is5.OnY">
            <Column ColumnSize="ColumnSize.IsAuto">
                <Icon Name="IconName.Tv" IconSize="IconSize.x5" TextColor="TextColor.Muted" Margin="Margin.Is3.FromBottom" />
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromTop">No Readers Configured</Heading>
                <Paragraph TextColor="TextColor.Muted" Margin="Margin.Is3.FromBottom">Add your first reader to get started</Paragraph>
                <Button Color="Color.Primary" Clicked="ShowAddReaderModal" ElementId="add-first-reader-button">
                    <Icon Name="IconName.Add" Margin="Margin.Is2.FromEnd" />
                    Add Reader
                </Button>
            </Column>
        </Row>
    }
</Container>

<!-- Add/Edit Reader Modal -->
<Modal @ref="readerModal" ElementId="reader-modal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@(editingReader != null ? "Edit Reader" : "Add Reader")</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Reader Name</FieldLabel>
                <TextEdit @bind-Text="readerForm.ReaderName" Placeholder="e.g., Main Entrance" ElementId="reader-name-input" />
                <FieldHelp>Enter a descriptive name for this reader</FieldHelp>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="CloseReaderModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="SaveReader" Loading="saving" ElementId="save-reader-button">
                Save Reader
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Delete Confirmation Modal -->
<Modal @ref="deleteModal" ElementId="delete-modal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Confirm Deletion</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Paragraph>Are you sure you want to delete the reader <Strong>@readerToDelete?.ReaderName</Strong>?</Paragraph>
            <Paragraph TextColor="TextColor.Muted">This action cannot be undone.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="CloseDeleteModal">Cancel</Button>
            <Button Color="Color.Danger" Clicked="ConfirmDeleteReader" Loading="deleting" ElementId="confirm-delete-button">
                Delete Reader
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    private List<ReaderConfiguration> readers = new();
    
    // Modal references
    private Modal? readerModal;
    private Modal? deleteModal;
    private bool saving = false;
    private bool deleting = false;
    
    // Form data
    private ReaderFormModel readerForm = new();
    private ReaderConfiguration? editingReader = null;
    private ReaderConfiguration? readerToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            readers = (await ReaderConfigurationService.GetAllReadersAsync()).ToList();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error loading readers: {ex.Message}|danger");
        }
    }

    private async Task ShowAddReaderModal()
    {
        editingReader = null;
        readerForm = new ReaderFormModel();
        await readerModal!.Show();
    }

    private async Task EditReader(ReaderConfiguration reader)
    {
        editingReader = reader;
        readerForm = ReaderFormModel.FromReaderConfiguration(reader);
        await readerModal!.Show();
    }

    private async Task DeleteReader(ReaderConfiguration reader)
    {
        readerToDelete = reader;
        await deleteModal!.Show();
    }
    
    private async Task CloseReaderModal()
    {
        editingReader = null;
        readerForm = new ReaderFormModel();
        await readerModal!.Hide();
    }
    
    private async Task CloseDeleteModal()
    {
        readerToDelete = null;
        await deleteModal!.Hide();
    }
    
    private async Task SaveReader()
    {
        if (string.IsNullOrWhiteSpace(readerForm.ReaderName))
        {
            await OnShowMessage.InvokeAsync("Reader name is required|danger");
            return;
        }
        
        saving = true;
        StateHasChanged();
        
        try
        {
            var readerConfig = readerForm.ToReaderConfiguration();
            
            // Auto-generate GUID for new readers
            if (editingReader == null)
            {
                readerConfig.ReaderId = Guid.NewGuid();
            }
            else
            {
                readerConfig.ReaderId = editingReader.ReaderId;
            }
            
            // Save reader (handles both create and update)
            await ReaderConfigurationService.SaveReaderAsync(readerConfig);
            
            if (editingReader != null)
            {
                await OnShowMessage.InvokeAsync($"Reader '{readerConfig.ReaderName}' updated successfully|success");
            }
            else
            {
                await OnShowMessage.InvokeAsync($"Reader '{readerConfig.ReaderName}' created successfully|success");
            }
            
            await CloseReaderModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error saving reader: {ex.Message}|danger");
        }
        finally
        {
            saving = false;
            StateHasChanged();
        }
    }
    
    private async Task ConfirmDeleteReader()
    {
        if (readerToDelete == null) return;
        
        deleting = true;
        StateHasChanged();
        
        try
        {
            await ReaderConfigurationService.DeleteReaderAsync(readerToDelete.ReaderId);
            await OnShowMessage.InvokeAsync($"Reader '{readerToDelete.ReaderName}' deleted successfully|success");
            
            await CloseDeleteModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            await OnShowMessage.InvokeAsync($"Error deleting reader: {ex.Message}|danger");
        }
        finally
        {
            deleting = false;
            StateHasChanged();
        }
    }

    // Form model for reader data binding
    public class ReaderFormModel
    {
        public string ReaderName { get; set; } = string.Empty;

        public static ReaderFormModel FromReaderConfiguration(ReaderConfiguration reader)
        {
            return new ReaderFormModel
            {
                ReaderName = reader.ReaderName
            };
        }

        public ReaderConfiguration ToReaderConfiguration()
        {
            return new ReaderConfiguration
            {
                ReaderId = Guid.Empty, // Will be set in SaveReader method
                ReaderName = ReaderName,
                DefaultFeedback = new ReaderFeedbackConfiguration
                {
                    Type = ReaderFeedbackType.Success,
                    LedColor = LedColor.Green,
                    BeepCount = 1,
                    LedDurationMs = 1000,
                    DisplayMessage = "ACCESS GRANTED"
                },
                ResultFeedback = new Dictionary<string, ReaderFeedbackConfiguration>()
            };
        }
    }
}