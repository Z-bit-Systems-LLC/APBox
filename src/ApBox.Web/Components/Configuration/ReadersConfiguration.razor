@using ApBox.Core.Models
@using ApBox.Web.ViewModels
@using ApBox.Web.Helpers

@inject ReadersConfigurationViewModel ViewModel
@implements IAsyncDisposable

<Container Fluid>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Row JustifyContent="JustifyContent.Between" AlignItems="AlignItems.Center">
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Heading Size="HeadingSize.Is3" ElementId="readers-title">Reader Configuration</Heading>
                </Column>
                @if (ViewModel.Readers.Any())
                {
                    <Column ColumnSize="ColumnSize.IsAuto">
                        <Button Color="Color.Primary" Clicked="() => ViewModel.ShowAddReaderCommand.Execute(null)" ElementId="add-reader-button">
                            <Icon Name="IconName.Add" Margin="Margin.Is2.FromEnd" />
                            Add Reader
                        </Button>
                    </Column>
                }
            </Row>
        </Column>
    </Row>

    @if (ViewModel.IsLoading)
    {
        <Row ElementId="loading-spinner">
            <Column>
                <Div Display="Display.Flex" JustifyContent="JustifyContent.Center" Margin="Margin.Is5.FromTop">
                    <Div ElementId="spinner-element"><Spinner Type="SpinnerType.Border" Color="Color.Primary" /></Div>
                    <Text Margin="Margin.Is2.FromStart">Loading readers...</Text>
                </Div>
            </Column>
        </Row>
    }
    else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <Alert Color="Color.Danger" Visible="true">
            <Icon Name="IconName.ExclamationTriangle" Margin="Margin.Is2.FromEnd" />
            @ViewModel.ErrorMessage
            <Button Color="Color.Secondary" Size="Size.Small" Margin="Margin.Is2.FromStart" Clicked="() => ViewModel.RefreshCommand.Execute(null)">
                <Icon Name="IconName.Redo" />
                Retry
            </Button>
        </Alert>
    }
    else if (ViewModel.Readers.Any())
    {
        <Row>
            @foreach (var reader in ViewModel.Readers)
            {
                <Column ColumnSize="ColumnSize.Is6.OnTablet.Is4.OnDesktop" Margin="Margin.Is4.FromBottom">
                    <Card Height="Height.Is100">
                        <CardHeader>
                            <Row JustifyContent="JustifyContent.Between" AlignItems="AlignItems.Center">
                                <Column ColumnSize="ColumnSize.IsAuto">
                                    <CardTitle Margin="Margin.Is0.FromBottom">@reader.ReaderName</CardTitle>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsAuto">
                                    <Buttons Size="Size.Small">
                                        <Button Color="Color.Primary" Outline Clicked="() => ViewModel.EditReaderCommand.Execute(reader)" ElementId="@($"edit-reader-{reader.ReaderId}")">
                                            <Icon Name="IconName.Edit" />
                                        </Button>
                                        <Button Color="Color.Danger" Outline Clicked="() => ViewModel.ConfirmDeleteReaderCommand.Execute(reader)" ElementId="@($"delete-reader-{reader.ReaderId}")">
                                            <Icon Name="IconName.Delete" />
                                        </Button>
                                    </Buttons>
                                </Column>
                            </Row>
                        </CardHeader>
                        <CardBody>
                            <Row>
                                <Column ColumnSize="ColumnSize.Is6">
                                    <Text TextColor="TextColor.Muted" TextSize="TextSize.Small">OSDP Address:</Text>
                                    <Paragraph Margin="Margin.Is0">@reader.Address</Paragraph>
                                </Column>
                                <Column ColumnSize="ColumnSize.Is6">
                                    <Text TextColor="TextColor.Muted" TextSize="TextSize.Small">Status:</Text>
                                    <Paragraph Margin="Margin.Is0">
                                        @{
                                            var (statusText, statusColor, statusIcon) = ReaderStatusHelper.GetReaderStatusDisplay(reader, ViewModel.ReaderStatuses);
                                        }
                                        <Badge Color="@statusColor">
                                            @if (statusIcon != null)
                                            {
                                                <Icon Name="@statusIcon" Margin="Margin.Is1.FromEnd" />
                                            }
                                            @statusText
                                        </Badge>
                                    </Paragraph>
                                </Column>
                            </Row>
                            
                            @if (!string.IsNullOrEmpty(reader.SerialPort))
                            {
                                <Row Margin="Margin.Is2.FromTop">
                                    <Column ColumnSize="ColumnSize.Is6">
                                        <Text TextColor="TextColor.Muted" TextSize="TextSize.Small">Serial Port:</Text>
                                        <Paragraph Margin="Margin.Is0">@reader.SerialPort</Paragraph>
                                    </Column>
                                    <Column ColumnSize="ColumnSize.Is6">
                                        <Text TextColor="TextColor.Muted" TextSize="TextSize.Small">Baud Rate:</Text>
                                        <Paragraph Margin="Margin.Is0">@reader.BaudRate</Paragraph>
                                    </Column>
                                </Row>
                            }
                        </CardBody>
                    </Card>
                </Column>
            }
        </Row>
    }
    else
    {
        <Row JustifyContent="JustifyContent.Center" TextAlignment="TextAlignment.Center" Padding="Padding.Is5.OnY">
            <Column ColumnSize="ColumnSize.IsAuto">
                <Icon Name="IconName.Tv" IconSize="IconSize.x5" TextColor="TextColor.Muted" Margin="Margin.Is3.FromBottom" />
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromTop">No Readers Configured</Heading>
                <Paragraph TextColor="TextColor.Muted" Margin="Margin.Is3.FromBottom">Add your first reader to get started</Paragraph>
                <Button Color="Color.Primary" Size="Size.Large" Clicked="() => ViewModel.ShowAddReaderCommand.Execute(null)" ElementId="add-first-reader-button">
                    <Icon Name="IconName.Add" Margin="Margin.Is2.FromEnd" />
                    Add Reader
                </Button>
            </Column>
        </Row>
    }
</Container>

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
{
    <Snackbar @ref="_successSnackbar" Color="SnackbarColor.Success" Visible="true">
        <SnackbarBody>
            <Icon Name="IconName.Check" Margin="Margin.Is2.FromEnd" />
            @ViewModel.SuccessMessage
        </SnackbarBody>
    </Snackbar>
}

<!-- Add/Edit Reader Modal -->
<Modal @bind-Visible="ViewModel.ShowReaderModal" ElementId="reader-modal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@(ViewModel.EditingReader != null ? "Edit Reader" : "Add Reader")</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="_validations" Model="ViewModel" ValidateOnLoad="false">
                <!-- Basic Settings -->
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is3.FromBottom">Basic Settings</Heading>
                <Row>
                    <Column ColumnSize="ColumnSize.Is8">
                        <Validation>
                            <Field>
                                <FieldLabel>Reader Name</FieldLabel>
                                <TextEdit @bind-Text="ViewModel.ReaderName" Placeholder="e.g., Main Entrance" ElementId="reader-name-input">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                                <FieldHelp>Enter a descriptive name for this reader</FieldHelp>
                            </Field>
                        </Validation>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">
                        <Field>
                            <FieldLabel>OSDP Address</FieldLabel>
                            <NumericEdit TValue="byte" @bind-Value="ViewModel.Address" Min="0" Max="127" ElementId="reader-address-input">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                            <FieldHelp>Device address on OSDP bus (0-127)</FieldHelp>
                        </Field>
                    </Column>
                </Row>

                <!-- Communication Settings -->
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is4.FromTop.Is3.FromBottom">Communication Settings</Heading>
                <Row>
                    <Column ColumnSize="ColumnSize.Is8">
                        <Field>
                            <FieldLabel>Serial Port</FieldLabel>
                            <Select @bind-SelectedValue="ViewModel.SerialPort" ElementId="serial-port-select">
                                <SelectItem Value="@((string?)null)">Select a serial port...</SelectItem>
                                @foreach (var port in ViewModel.AvailablePorts)
                                {
                                    <SelectItem Value="@port">@port</SelectItem>
                                }
                            </Select>
                            <FieldHelp>Serial port for OSDP communication</FieldHelp>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">
                        <Field>
                            <FieldLabel>Baud Rate</FieldLabel>
                            <Select @bind-SelectedValue="ViewModel.BaudRate" ElementId="baud-rate-select">
                                <SelectItem Value="9600">9600</SelectItem>
                                <SelectItem Value="19200">19200</SelectItem>
                                <SelectItem Value="38400">38400</SelectItem>
                                <SelectItem Value="57600">57600</SelectItem>
                                <SelectItem Value="115200">115200</SelectItem>
                            </Select>
                            <FieldHelp>Communication speed</FieldHelp>
                        </Field>
                    </Column>
                </Row>

                <!-- Security Settings -->
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is4.FromTop.Is3.FromBottom">Security Settings</Heading>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6">
                        <Field>
                            <FieldLabel>Security Mode</FieldLabel>
                            <Select @bind-SelectedValue="ViewModel.SecurityMode" ElementId="security-mode-select">
                                <SelectItem Value="OsdpSecurityMode.ClearText">🔓 Clear Text (No Security)</SelectItem>
                                <SelectItem Value="OsdpSecurityMode.Install">🔧 Install Secure Channel</SelectItem>
                            </Select>
                            <FieldHelp>
                                @if (ViewModel.SecurityMode == OsdpSecurityMode.ClearText)
                                {
                                    <Text>No encryption will be used</Text>
                                }
                                else if (ViewModel.SecurityMode == OsdpSecurityMode.Install)
                                {
                                    <Text>Install mode will establish secure channel with default key</Text>
                                }
                            </FieldHelp>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6">
                        <Field>
                            <FieldLabel>Reader Enabled</FieldLabel>
                            <Switch @bind-Checked="ViewModel.IsEnabled" ElementId="reader-enabled-switch">
                                @(ViewModel.IsEnabled ? "Enabled" : "Disabled")
                            </Switch>
                            <FieldHelp>Enable or disable this reader</FieldHelp>
                        </Field>
                    </Column>
                </Row>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => ViewModel.CloseReaderModalCommand.Execute(null)">Cancel</Button>
            <Button Color="Color.Primary" Clicked="SaveReader" Loading="ViewModel.IsSaving" ElementId="save-reader-button">
                <Icon Name="IconName.Save" Margin="Margin.Is2.FromEnd" />
                @(ViewModel.EditingReader != null ? "Update" : "Add") Reader
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Delete Confirmation Modal -->
<Modal @bind-Visible="ViewModel.ShowDeleteModal" ElementId="delete-modal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Confirm Delete</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Text>Are you sure you want to delete the reader <strong>@ViewModel.ReaderToDelete?.ReaderName</strong>?</Text>
            <Text TextColor="TextColor.Muted" Margin="Margin.Is2.FromTop">This action cannot be undone.</Text>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => ViewModel.CancelDeleteCommand.Execute(null)">Cancel</Button>
            <Button Color="Color.Danger" Clicked="() => ViewModel.DeleteReaderCommand.Execute(null)" Loading="ViewModel.IsDeleting" ElementId="confirm-delete-button">
                <Icon Name="IconName.Delete" Margin="Margin.Is2.FromEnd" />
                Delete
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    private Validations? _validations;
    private Snackbar? _successSnackbar;

    protected override async Task OnInitializedAsync()
    {
        // Set up component callbacks for the ViewModel
        ViewModel.StateHasChanged = StateHasChanged;
        ViewModel.InvokeAsync = InvokeAsync;
        
        // Initialize the ViewModel
        await ViewModel.InitializeCommand.ExecuteAsync(null);
        
        // Watch for success messages
        ViewModel.PropertyChanged += async (_, args) =>
        {
            if (args.PropertyName == nameof(ViewModel.SuccessMessage) && !string.IsNullOrEmpty(ViewModel.SuccessMessage))
            {
                await ShowSuccessMessage();
            }
        };
    }

    private async Task SaveReader()
    {
        if (_validations != null && !await _validations.ValidateAll())
        {
            return;
        }

        await ViewModel.SaveReaderCommand.ExecuteAsync(null);
    }

    private async Task ShowSuccessMessage()
    {
        StateHasChanged();
        
        // Auto-hide after 3 seconds
        await Task.Delay(3000);
        ViewModel.SuccessMessage = null;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await ViewModel.DisposeAsync();
    }
}