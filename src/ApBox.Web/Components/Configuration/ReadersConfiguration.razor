@using ApBox.Core.Services
@using ApBox.Core.Models
@using System.ComponentModel.DataAnnotations
@using ApBox.Web.Hubs
@using ApBox.Web.Helpers
@using Microsoft.AspNetCore.SignalR.Client

@inject IReaderConfigurationService ReaderConfigurationService
@inject IReaderService ReaderService
@inject NavigationManager Navigation
@implements IAsyncDisposable

<Container Fluid>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Row JustifyContent="JustifyContent.Between" AlignItems="AlignItems.Center">
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Heading Size="HeadingSize.Is3" ElementId="readers-title">Reader Configuration</Heading>
                </Column>
                @if (_readers.Any())
                {
                    <Column ColumnSize="ColumnSize.IsAuto">
                        <Button Color="Color.Primary" Clicked="ShowAddReaderModal" ElementId="add-reader-button">
                            <Icon Name="IconName.Add" Margin="Margin.Is2.FromEnd" />
                            Add Reader
                        </Button>
                    </Column>
                }
            </Row>
        </Column>
    </Row>
    
    @if (_readers.Any())
    {
        <Row>
            @foreach (var reader in _readers)
            {
                <Column ColumnSize="ColumnSize.Is6.OnTablet.Is4.OnDesktop" Margin="Margin.Is4.FromBottom">
                    <Card Height="Height.Is100">
                        <CardHeader>
                            <Row JustifyContent="JustifyContent.Between" AlignItems="AlignItems.Center">
                                <Column ColumnSize="ColumnSize.IsAuto">
                                    <CardTitle Margin="Margin.Is0.FromBottom">@reader.ReaderName</CardTitle>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsAuto">
                                    <Buttons Size="Size.Small">
                                        <Button Color="Color.Primary" Outline Clicked="() => EditReader(reader)" ElementId="@($"edit-reader-{reader.ReaderId}")">
                                            <Icon Name="IconName.Edit" />
                                        </Button>
                                        <Button Color="Color.Danger" Outline Clicked="() => DeleteReader(reader)" ElementId="@($"delete-reader-{reader.ReaderId}")">
                                            <Icon Name="IconName.Delete" />
                                        </Button>
                                    </Buttons>
                                </Column>
                            </Row>
                        </CardHeader>
                        <CardBody>
                            <div class="row">
                                <div class="col-6">
                                    <small class="text-muted">OSDP Address:</small><br>
                                    <span>@reader.Address</span>
                                </div>
                                <div class="col-6">
                                    <small class="text-muted">Status:</small><br>
                                    @{
                                        var (statusText, statusColor, statusIcon) = ReaderStatusHelper.GetReaderStatusDisplay(reader, _readerStatuses);
                                    }
                                    <Badge Color="@statusColor">
                                        @if (statusIcon != null)
                                        {
                                            <Icon Name="@statusIcon" Margin="Margin.Is1.FromEnd" />
                                        }
                                        @statusText
                                    </Badge>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(reader.SerialPort))
                            {
                                <div class="row mt-2">
                                    <div class="col-6">
                                        <small class="text-muted">Serial Port:</small><br>
                                        <span>@reader.SerialPort</span>
                                    </div>
                                    <div class="col-6">
                                        <small class="text-muted">Baud Rate:</small><br>
                                        <span>@reader.BaudRate</span>
                                    </div>
                                </div>
                            }
                        </CardBody>
                    </Card>
                </Column>
            }
        </Row>
    }
    else
    {
        <Row JustifyContent="JustifyContent.Center" TextAlignment="TextAlignment.Center" Padding="Padding.Is5.OnY">
            <Column ColumnSize="ColumnSize.IsAuto">
                <Icon Name="IconName.Tv" IconSize="IconSize.x5" TextColor="TextColor.Muted" Margin="Margin.Is3.FromBottom" />
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromTop">No Readers Configured</Heading>
                <Paragraph TextColor="TextColor.Muted" Margin="Margin.Is3.FromBottom">Add your first reader to get started</Paragraph>
                <Button Color="Color.Primary" Size="Size.Large" Clicked="ShowAddReaderModal" ElementId="add-first-reader-button">
                    <Icon Name="IconName.Add" Margin="Margin.Is2.FromEnd" />
                    Add Reader
                </Button>
            </Column>
        </Row>
    }
</Container>

<!-- Add/Edit Reader Modal -->
<Modal @ref="_readerModal" ElementId="reader-modal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@(_editingReader != null ? "Edit Reader" : "Add Reader")</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="_validations" Model="_readerForm" ValidateOnLoad="false">
                <!-- Basic Settings -->
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is3.FromBottom">Basic Settings</Heading>
                <Row>
                    <Column ColumnSize="ColumnSize.Is8">
                        <Validation>
                            <Field>
                                <FieldLabel>Reader Name</FieldLabel>
                                <TextEdit @bind-Text="_readerForm.ReaderName" Placeholder="e.g., Main Entrance" ElementId="reader-name-input">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                                <FieldHelp>Enter a descriptive name for this reader</FieldHelp>
                            </Field>
                        </Validation>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">
                        <Field>
                            <FieldLabel>OSDP Address</FieldLabel>
                            <NumericEdit TValue="byte" @bind-Value="_readerForm.Address" Min="0" Max="127" ElementId="reader-address-input">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                            <FieldHelp>Device address on OSDP bus (0-127)</FieldHelp>
                        </Field>
                    </Column>
                </Row>

                <!-- Communication Settings -->
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is4.FromTop.Is3.FromBottom">Communication Settings</Heading>
                <Row>
                    <Column ColumnSize="ColumnSize.Is8">
                        <Field>
                            <FieldLabel>Serial Port</FieldLabel>
                            <Select @bind-SelectedValue="_readerForm.SerialPort" ElementId="serial-port-select">
                                <SelectItem Value="@((string?)null)">Select a serial port...</SelectItem>
                                @foreach (var port in _availablePorts)
                                {
                                    <SelectItem Value="@port">@port</SelectItem>
                                }
                            </Select>
                            <FieldHelp>Serial port for OSDP communication</FieldHelp>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">
                        <Field>
                            <FieldLabel>Baud Rate</FieldLabel>
                            <Select @bind-SelectedValue="_readerForm.BaudRate" ElementId="baud-rate-select">
                                <SelectItem Value="9600">9600</SelectItem>
                                <SelectItem Value="19200">19200</SelectItem>
                                <SelectItem Value="38400">38400</SelectItem>
                                <SelectItem Value="57600">57600</SelectItem>
                                <SelectItem Value="115200">115200</SelectItem>
                            </Select>
                            <FieldHelp>Communication speed</FieldHelp>
                        </Field>
                    </Column>
                </Row>

                <!-- Security Settings -->
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is4.FromTop.Is3.FromBottom">Security Settings</Heading>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6">
                        <Field>
                            <FieldLabel>Security Mode</FieldLabel>
                            <Select @bind-SelectedValue="_readerForm.SecurityMode" ElementId="security-mode-select">
                                <SelectItem Value="OsdpSecurityMode.ClearText">ðŸ”“ Clear Text (No Security)</SelectItem>
                                <SelectItem Value="OsdpSecurityMode.Install">ðŸ”§ Install Secure Channel</SelectItem>
                            </Select>
                            <FieldHelp>
                                @if (_readerForm.SecurityMode == OsdpSecurityMode.ClearText)
                                {
                                    <Text>No encryption will be used</Text>
                                }
                                else if (_readerForm.SecurityMode == OsdpSecurityMode.Install)
                                {
                                    <Text>Will install a random key using the default OSDP key</Text>
                                }
                            </FieldHelp>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6">
                        <!-- Poll interval removed - using default OSDP bus timing -->
                    </Column>
                </Row>

                <!-- Status -->
                <Row Margin="Margin.Is3.FromTop">
                    <Column>
                        <Field>
                            <Check @bind-Checked="_readerForm.IsEnabled" ElementId="reader-enabled-check">Enabled</Check>
                            <FieldHelp>Enable communication with this reader</FieldHelp>
                        </Field>
                    </Column>
                </Row>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="CloseReaderModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="SaveReader" Loading="_saving" ElementId="save-reader-button">
                Save Reader
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Delete Confirmation Modal -->
<Modal @ref="_deleteModal" ElementId="delete-modal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Confirm Deletion</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Paragraph>Are you sure you want to delete the reader <Strong>@_readerToDelete?.ReaderName</Strong>?</Paragraph>
            <Paragraph TextColor="TextColor.Muted">This action cannot be undone.</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="CloseDeleteModal">Cancel</Button>
            <Button Color="Color.Danger" Clicked="ConfirmDeleteReader" Loading="_deleting" ElementId="confirm-delete-button">
                Delete Reader
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Snackbar @ref="_snackbar">
    <SnackbarBody>
        @_snackBarMessage
    </SnackbarBody>
</Snackbar>

@code {
    [Parameter] public EventCallback<string> OnShowMessage { get; set; }
    
    private List<ReaderConfiguration> _readers = new();
    private Dictionary<Guid, bool> _readerStatuses = new();
    private List<string> _availablePorts = new();
    private HubConnection? _hubConnection;
    
    // Modal references
    private Modal? _readerModal;
    private Modal? _deleteModal;
    private bool _saving;
    private bool _deleting;
    
    Snackbar? _snackbar;
    string? _snackBarMessage;
    
    // Validation reference
    private Validations? _validations;
    
    // Form data
    private ReaderFormModel _readerForm = new();
    private ReaderConfiguration? _editingReader;
    private ReaderConfiguration? _readerToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await InitializeSignalR();
    }

    private async Task LoadData()
    {
        try
        {
            _readers = (await ReaderConfigurationService.GetAllReadersAsync()).ToList();
            
            // Load reader statuses using the IReaderService
            _readerStatuses = await ReaderService.GetAllReaderStatusesAsync() ?? new Dictionary<Guid, bool>();
        }
        catch (Exception ex)
        {
            await ShowSnackbar($"Error loading readers: {ex.Message}", SnackbarColor.Danger);
        }
    }

    private async Task InitializeSignalR()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/cardevents"))
                .Build();

            // Handle reader status notifications
            _hubConnection.On<ReaderStatusNotification>("ReaderStatusChanged", async (notification) =>
            {
                await InvokeAsync(() =>
                {
                    _readerStatuses[notification.ReaderId] = notification.IsOnline;
                    StateHasChanged();
                });
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing SignalR: {ex.Message}");
        }
    }

    private async Task ShowAddReaderModal()
    {
        _editingReader = null;
        _readerForm = new ReaderFormModel();
        await RefreshSerialPorts();
        await _readerModal!.Show();
        
        // Clear previous validation state
        if (_validations != null)
        {
            await _validations.ClearAll();
        }
    }

    private async Task EditReader(ReaderConfiguration reader)
    {
        _editingReader = reader;
        _readerForm = ReaderFormModel.FromReaderConfiguration(reader);
        await RefreshSerialPorts();
        await _readerModal!.Show();
        
        // Clear previous validation state
        if (_validations != null)
        {
            await _validations.ClearAll();
        }
    }

    private async Task DeleteReader(ReaderConfiguration reader)
    {
        _readerToDelete = reader;
        await _deleteModal!.Show();
    }
    
    private async Task CloseReaderModal()
    {
        _editingReader = null;
        _readerForm = new ReaderFormModel();
        await _readerModal!.Hide();
    }
    
    private async Task CloseDeleteModal()
    {
        _readerToDelete = null;
        await _deleteModal!.Hide();
    }
    
    private async Task SaveReader()
    {
        // Validate the form using Blazorise validation
        if (_validations != null && !await _validations.ValidateAll())
        {
            await ShowSnackbar("Please correct the validation errors", SnackbarColor.Danger);
            return;
        }
        
        _saving = true;
        StateHasChanged();
        
        try
        {
            var readerConfig = _readerForm.ToReaderConfiguration();
            
            // Auto-generate GUID for new readers
            readerConfig.ReaderId = _editingReader?.ReaderId ?? Guid.NewGuid();
            
            // Save reader (handles both create and update)
            await ReaderConfigurationService.SaveReaderAsync(readerConfig);
            
            if (_editingReader != null)
            {
                await ShowSnackbar($"Reader '{readerConfig.ReaderName}' updated successfully", SnackbarColor.Success);
            }
            else
            {
                await ShowSnackbar($"Reader '{readerConfig.ReaderName}' created successfully", SnackbarColor.Success);
            }
            
            await CloseReaderModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            await ShowSnackbar($"Error saving reader: {ex.Message}", SnackbarColor.Danger);
        }
        finally
        {
            _saving = false;
            StateHasChanged();
        }
    }
    
    private async Task ConfirmDeleteReader()
    {
        if (_readerToDelete == null) return;
        
        _deleting = true;
        StateHasChanged();
        
        try
        {
            await ReaderConfigurationService.DeleteReaderAsync(_readerToDelete.ReaderId);
            await ShowSnackbar($"Reader '{_readerToDelete.ReaderName}' deleted successfully", SnackbarColor.Success);
            
            await CloseDeleteModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            await ShowSnackbar($"Error deleting reader: {ex.Message}", SnackbarColor.Danger);
        }
        finally
        {
            _deleting = false;
            StateHasChanged();
        }
    }

    private async Task ShowSnackbar(string message, SnackbarColor color)
    {
        if (_snackbar != null)
        {
            _snackbar.Color = color;
            _snackBarMessage = message;
            await _snackbar.Show();
        }
    }

    private async Task RefreshSerialPorts()
    {
        try
        {
            // Get available serial ports
            _availablePorts = System.IO.Ports.SerialPort.GetPortNames().ToList();
            
            // Add common Linux/Docker ports if running on non-Windows
            if (!OperatingSystem.IsWindows())
            {
                var linuxPorts = new[] { "/dev/ttyUSB0", "/dev/ttyUSB1", "/dev/ttyS0", "/dev/ttyS1", "/dev/ttyAMA0" };
                foreach (var port in linuxPorts)
                {
                    if (Directory.Exists(Path.GetDirectoryName(port)) && !_availablePorts.Contains(port))
                    {
                        _availablePorts.Add(port);
                    }
                }
            }
            
            _availablePorts = _availablePorts.OrderBy(p => p).ToList();
        }
        catch (Exception ex)
        {
            await ShowSnackbar($"Error detecting serial ports: {ex.Message}", SnackbarColor.Warning);
            _availablePorts = new List<string>();
        }
    }

    // Form model for reader data binding
    public class ReaderFormModel
    {
        [Required(ErrorMessage = "Reader name is required")]
        [StringLength(100, MinimumLength = 2, ErrorMessage = "Reader name must be between 2 and 100 characters")]
        [Display(Name = "Reader Name")]
        public string ReaderName { get; set; } = string.Empty;

        [Display(Name = "OSDP Address")]
        public byte Address { get; set; }

        [Display(Name = "Serial Port")]
        public string? SerialPort { get; set; }

        [Display(Name = "Baud Rate")]
        public int BaudRate { get; set; } = 9600;

        [Display(Name = "Security Mode")]
        public OsdpSecurityMode SecurityMode { get; set; } = OsdpSecurityMode.ClearText;


        [Display(Name = "Enabled")]
        public bool IsEnabled { get; set; } = true;

        public static ReaderFormModel FromReaderConfiguration(ReaderConfiguration reader)
        {
            return new ReaderFormModel
            {
                ReaderName = reader.ReaderName,
                Address = reader.Address,
                SerialPort = reader.SerialPort,
                BaudRate = reader.BaudRate,
                SecurityMode = reader.SecurityMode,
                IsEnabled = reader.IsEnabled
            };
        }

        public ReaderConfiguration ToReaderConfiguration()
        {
            return new ReaderConfiguration
            {
                ReaderId = Guid.Empty, // Will be set in SaveReader method
                ReaderName = ReaderName,
                Address = Address,
                SerialPort = SerialPort,
                BaudRate = BaudRate,
                SecurityMode = SecurityMode,
                IsEnabled = IsEnabled
            };
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}